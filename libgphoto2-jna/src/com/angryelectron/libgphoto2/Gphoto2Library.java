/**
 * Copyright 2012 Andrew Bythell, abythell@ieee.org
 *
 * This file is part of libgphoto2-jna.
 *
 * libgphoto2-jna is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * libgphoto2-jna is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * libphoto2-jna. If not, see <http://www.gnu.org/licenses/>.
 */
package com.angryelectron.libgphoto2;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>gphoto2</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Gphoto2Library extends Library {
	public static final String JNA_LIBRARY_NAME = "gphoto2";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Gphoto2Library.JNA_LIBRARY_NAME);
	public static final Gphoto2Library INSTANCE = (Gphoto2Library)Native.loadLibrary(Gphoto2Library.JNA_LIBRARY_NAME, Gphoto2Library.class);
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:14</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:14</i><br>
	 * enum values
	 */
	public static interface GPPortType {
		/**
		 * < \brief No specific type associated.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:7</i>
		 */
		public static final int GP_PORT_NONE = (int)0;
		/**
		 * < \brief Serial port.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:8</i>
		 */
		public static final int GP_PORT_SERIAL = (int)(1 << 0);
		/**
		 * < \brief USB port.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:9</i>
		 */
		public static final int GP_PORT_USB = (int)(1 << 2);
		/**
		 * < \brief Disk / local mountpoint port.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:10</i>
		 */
		public static final int GP_PORT_DISK = (int)(1 << 3);
		/**
		 * < \brief PTP/IP port.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:11</i>
		 */
		public static final int GP_PORT_PTPIP = (int)(1 << 4);
		/**
		 * < \brief Direct IO to an usb mass storage device.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:12</i>
		 */
		public static final int GP_PORT_USB_DISK_DIRECT = (int)(1 << 5);
		/**
		 * < \brief USB Mass Storage raw SCSI port.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:13</i>
		 */
		public static final int GP_PORT_USB_SCSI = (int)(1 << 6);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:64</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:64</i><br>
	 * enum values
	 */
	public static interface GPPortSerialParity {
		/**
		 * < \brief Parity is off (disabled)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:61</i>
		 */
		public static final int GP_PORT_SERIAL_PARITY_OFF = (int)0;
		/**
		 * < \brief Parity is even.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:62</i>
		 */
		public static final int GP_PORT_SERIAL_PARITY_EVEN = (int)1;
		/**
		 * < \brief Parity is odd.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:63</i>
		 */
		public static final int GP_PORT_SERIAL_PARITY_ODD = (int)2;
	};
	/// < \brief USB bulk IN ep
	public static final int GP_PORT_USB_ENDPOINT_IN = (int)0;
	/// < \brief USB bulk OUT ep
	public static final int GP_PORT_USB_ENDPOINT_OUT = (int)1;
	/// < \brief USB Interrupt ep
	public static final int GP_PORT_USB_ENDPOINT_INT = (int)2;
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:181</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:181</i><br>
	 * enum values
	 */
	public static interface GPPin {
		/**
		 * < \brief RTS line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:175</i>
		 */
		public static final int GP_PIN_RTS = (int)0;
		/**
		 * < \brief DTR line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:176</i>
		 */
		public static final int GP_PIN_DTR = (int)1;
		/**
		 * < \brief CTS line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:177</i>
		 */
		public static final int GP_PIN_CTS = (int)2;
		/**
		 * < \brief DSR line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:178</i>
		 */
		public static final int GP_PIN_DSR = (int)3;
		/**
		 * < \brief Carrier Detect line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:179</i>
		 */
		public static final int GP_PIN_CD = (int)4;
		/**
		 * < \brief RING (Modem) line<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:180</i>
		 */
		public static final int GP_PIN_RING = (int)5;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:190</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:190</i><br>
	 * enum values
	 */
	public static interface GPLevel {
		/**
		 * < \brief Pull to low (0V)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:188</i>
		 */
		public static final int GP_LEVEL_LOW = (int)0;
		/**
		 * < \brief Pull to high (nV)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:189</i>
		 */
		public static final int GP_LEVEL_HIGH = (int)1;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:249</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:249</i><br>
	 * enum values
	 */
	public static interface GPLogLevel {
		/**
		 * < \brief Log message is an error infomation.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:245</i>
		 */
		public static final int GP_LOG_ERROR = (int)0;
		/**
		 * < \brief Log message is an verbose debug infomation.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:246</i>
		 */
		public static final int GP_LOG_VERBOSE = (int)1;
		/**
		 * < \brief Log message is an debug infomation.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:247</i>
		 */
		public static final int GP_LOG_DEBUG = (int)2;
		/**
		 * < \brief Log message is a data hex dump.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:248</i>
		 */
		public static final int GP_LOG_DATA = (int)3;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:372</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:372</i><br>
	 * enum values
	 */
	public static interface CameraFileType {
		/**
		 * < A preview of an image.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:364</i>
		 */
		public static final int GP_FILE_TYPE_PREVIEW = (int)0;
		/**
		 * < The regular normal data of a file.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:365</i>
		 */
		public static final int GP_FILE_TYPE_NORMAL = (int)1;
		/**
		 * < The raw mode of a file, for instance the raw bayer data for cameras<br>
		 * where postprocessing is done in the driver. The RAW files of modern<br>
		 * DSLRs are GP_FILE_TYPE_NORMAL usually.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:368</i>
		 */
		public static final int GP_FILE_TYPE_RAW = (int)2;
		/**
		 * < The audio view of a file. Perhaps an embedded comment or similar.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:369</i>
		 */
		public static final int GP_FILE_TYPE_AUDIO = (int)3;
		/**
		 * < The embedded EXIF data of an image.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:370</i>
		 */
		public static final int GP_FILE_TYPE_EXIF = (int)4;
		/**
		 * < The metadata of a file, like Metadata of files on MTP devices.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:371</i>
		 */
		public static final int GP_FILE_TYPE_METADATA = (int)5;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:381</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:381</i><br>
	 * enum values
	 */
	public static interface CameraFileAccessType {
		/**
		 * < File is in system memory.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:379</i>
		 */
		public static final int GP_FILE_ACCESSTYPE_MEMORY = (int)0;
		/**
		 * < File is associated with a UNIX filedescriptor.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:380</i>
		 */
		public static final int GP_FILE_ACCESSTYPE_FD = (int)1;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:482</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:482</i><br>
	 * enum values
	 */
	public static interface GPContextFeedback {
		/**
		 * < Everything ok... proceed.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:480</i>
		 */
		public static final int GP_CONTEXT_FEEDBACK_OK = (int)0;
		/**
		 * < Please cancel the current transfer if possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:481</i>
		 */
		public static final int GP_CONTEXT_FEEDBACK_CANCEL = (int)1;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:601</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:601</i><br>
	 * enum values
	 */
	public static interface CameraDriverStatus {
		/**
		 * < Driver is production ready.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:597</i>
		 */
		public static final int GP_DRIVER_STATUS_PRODUCTION = (int)0;
		/**
		 * < Driver is beta quality.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:598</i>
		 */
		public static final int GP_DRIVER_STATUS_TESTING = (int)1;
		/**
		 * < Driver is alpha quality and might even not work.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:599</i>
		 */
		public static final int GP_DRIVER_STATUS_EXPERIMENTAL = (int)2;
		/**
		 * < Driver is no longer recommended to use and will be removed.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:600</i>
		 */
		public static final int GP_DRIVER_STATUS_DEPRECATED = (int)3;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:609</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:609</i><br>
	 * enum values
	 */
	public static interface GphotoDeviceType {
		/**
		 * < Traditional still camera<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:607</i>
		 */
		public static final int GP_DEVICE_STILL_CAMERA = (int)0;
		/**
		 * < Audio player<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:608</i>
		 */
		public static final int GP_DEVICE_AUDIO_PLAYER = (int)(1 << 0);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:621</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:621</i><br>
	 * enum values
	 */
	public static interface CameraOperation {
		/**
		 * < No remote control operation supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:615</i>
		 */
		public static final int GP_OPERATION_NONE = (int)0;
		/**
		 * < Capturing images supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:616</i>
		 */
		public static final int GP_OPERATION_CAPTURE_IMAGE = (int)(1 << 0);
		/**
		 * < Capturing videos supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:617</i>
		 */
		public static final int GP_OPERATION_CAPTURE_VIDEO = (int)(1 << 1);
		/**
		 * < Capturing audio supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:618</i>
		 */
		public static final int GP_OPERATION_CAPTURE_AUDIO = (int)(1 << 2);
		/**
		 * < Capturing image previews supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:619</i>
		 */
		public static final int GP_OPERATION_CAPTURE_PREVIEW = (int)(1 << 3);
		/**
		 * < Camera and Driver configuration supported.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:620</i>
		 */
		public static final int GP_OPERATION_CONFIG = (int)(1 << 4);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:630</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:630</i><br>
	 * enum values
	 */
	public static interface CameraFileOperation {
		/**
		 * < No special file operations, just download.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:624</i>
		 */
		public static final int GP_FILE_OPERATION_NONE = (int)0;
		/**
		 * < Deletion of files is possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:625</i>
		 */
		public static final int GP_FILE_OPERATION_DELETE = (int)(1 << 1);
		/**
		 * < Previewing viewfinder content is possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:626</i>
		 */
		public static final int GP_FILE_OPERATION_PREVIEW = (int)(1 << 3);
		/**
		 * < Raw retrieval is possible (used by non-JPEG cameras)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:627</i>
		 */
		public static final int GP_FILE_OPERATION_RAW = (int)(1 << 4);
		/**
		 * < Audio retrieval is possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:628</i>
		 */
		public static final int GP_FILE_OPERATION_AUDIO = (int)(1 << 5);
		/**
		 * < EXIF retrieval is possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:629</i>
		 */
		public static final int GP_FILE_OPERATION_EXIF = (int)(1 << 6);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:638</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:638</i><br>
	 * enum values
	 */
	public static interface CameraFolderOperation {
		/**
		 * < No special filesystem operation.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:633</i>
		 */
		public static final int GP_FOLDER_OPERATION_NONE = (int)0;
		/**
		 * < Deletion of all files on the device.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:634</i>
		 */
		public static final int GP_FOLDER_OPERATION_DELETE_ALL = (int)(1 << 0);
		/**
		 * < Upload of files to the device possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:635</i>
		 */
		public static final int GP_FOLDER_OPERATION_PUT_FILE = (int)(1 << 1);
		/**
		 * < Making directories on the device possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:636</i>
		 */
		public static final int GP_FOLDER_OPERATION_MAKE_DIR = (int)(1 << 2);
		/**
		 * < Removing directories from the device possible.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:637</i>
		 */
		public static final int GP_FOLDER_OPERATION_REMOVE_DIR = (int)(1 << 3);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:742</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:742</i><br>
	 * enum values
	 */
	public static interface CameraWidgetType {
		/**
		 * < \brief Window widget<br>
		 *   This is the toplevel configuration widget. It should likely contain multiple #GP_WIDGET_SECTION entries.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:727</i>
		 */
		public static final int GP_WIDGET_WINDOW = (int)0;
		/**
		 * < \brief Section widget (think Tab)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:728</i>
		 */
		public static final int GP_WIDGET_SECTION = (int)1;
		/**
		 * < \brief Text widget.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:729</i>
		 */
		public static final int GP_WIDGET_TEXT = (int)2;
		/**
		 * char *<br>
		 * char *<br>
		 * < \brief Slider widget.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:731</i>
		 */
		public static final int GP_WIDGET_RANGE = (int)3;
		/**
		 * float<br>
		 * float<br>
		 * < \brief Toggle widget (think check box)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:733</i>
		 */
		public static final int GP_WIDGET_TOGGLE = (int)4;
		/**
		 * int<br>
		 * int<br>
		 * < \brief Radio button widget.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:735</i>
		 */
		public static final int GP_WIDGET_RADIO = (int)5;
		/**
		 * char *<br>
		 * char *<br>
		 * < \brief Menu widget (same as RADIO).<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:737</i>
		 */
		public static final int GP_WIDGET_MENU = (int)6;
		/**
		 * char *<br>
		 * char *<br>
		 * < \brief Button press widget.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:739</i>
		 */
		public static final int GP_WIDGET_BUTTON = (int)7;
		/**
		 * CameraWidgetCallback<br>
		 * CameraWidgetCallback<br>
		 * < \brief Date entering widget.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:741</i>
		 */
		public static final int GP_WIDGET_DATE = (int)8;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:833</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:833</i><br>
	 * enum values
	 */
	public static interface CameraFileInfoFields {
		/**
		 * < \brief No fields set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:823</i>
		 */
		public static final int GP_FILE_INFO_NONE = (int)0;
		/**
		 * < \brief The MIME type is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:824</i>
		 */
		public static final int GP_FILE_INFO_TYPE = (int)(1 << 0);
		/**
		 * < \brief The name is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:825</i>
		 */
		public static final int GP_FILE_INFO_NAME = (int)(1 << 1);
		/**
		 * < \brief The filesize is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:826</i>
		 */
		public static final int GP_FILE_INFO_SIZE = (int)(1 << 2);
		/**
		 * < \brief The width is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:827</i>
		 */
		public static final int GP_FILE_INFO_WIDTH = (int)(1 << 3);
		/**
		 * < \brief The height is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:828</i>
		 */
		public static final int GP_FILE_INFO_HEIGHT = (int)(1 << 4);
		/**
		 * < \brief The access permissions are set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:829</i>
		 */
		public static final int GP_FILE_INFO_PERMISSIONS = (int)(1 << 5);
		/**
		 * < \brief The status is set (downloaded).<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:830</i>
		 */
		public static final int GP_FILE_INFO_STATUS = (int)(1 << 6);
		/**
		 * < \brief The modification time is set.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:831</i>
		 */
		public static final int GP_FILE_INFO_MTIME = (int)(1 << 7);
		/**
		 * < \brief All possible fields set. Internal.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:832</i>
		 */
		public static final int GP_FILE_INFO_ALL = (int)255;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:843</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:843</i><br>
	 * enum values
	 */
	public static interface CameraFilePermissions {
		/**
		 * < \brief No permissions.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:839</i>
		 */
		public static final int GP_FILE_PERM_NONE = (int)0;
		/**
		 * < \brief Read permissions.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:840</i>
		 */
		public static final int GP_FILE_PERM_READ = (int)(1 << 0);
		/**
		 * < \brief Write permissions<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:841</i>
		 */
		public static final int GP_FILE_PERM_DELETE = (int)(1 << 1);
		/**
		 * < \brief Internal.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:842</i>
		 */
		public static final int GP_FILE_PERM_ALL = (int)255;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:851</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:851</i><br>
	 * enum values
	 */
	public static interface CameraFileStatus {
		/**
		 * < File is not downloaded.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:849</i>
		 */
		public static final int GP_FILE_STATUS_NOT_DOWNLOADED = (int)0;
		/**
		 * < File is already downloaded.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:850</i>
		 */
		public static final int GP_FILE_STATUS_DOWNLOADED = (int)1;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:921</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:921</i><br>
	 * enum values
	 */
	public static interface CameraStorageInfoFields {
		/**
		 * < \brief The base directory. <br>
		 * Usually / if just 1 storage is attached.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:910</i>
		 */
		public static final int GP_STORAGEINFO_BASE = (int)(1 << 0);
		/**
		 * < \brief Label of the filesystem.<br>
		 * Could also be a DOS label.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:913</i>
		 */
		public static final int GP_STORAGEINFO_LABEL = (int)(1 << 1);
		/**
		 * < \brief More verbose description.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:914</i>
		 */
		public static final int GP_STORAGEINFO_DESCRIPTION = (int)(1 << 2);
		/**
		 * < \brief Access permissions.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:915</i>
		 */
		public static final int GP_STORAGEINFO_ACCESS = (int)(1 << 3);
		/**
		 * < \brief Hardware type.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:916</i>
		 */
		public static final int GP_STORAGEINFO_STORAGETYPE = (int)(1 << 4);
		/**
		 * < \brief Filesystem type.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:917</i>
		 */
		public static final int GP_STORAGEINFO_FILESYSTEMTYPE = (int)(1 << 5);
		/**
		 * < \brief Maximum capacity in kbytes<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:918</i>
		 */
		public static final int GP_STORAGEINFO_MAXCAPACITY = (int)(1 << 6);
		/**
		 * < \brief Free space in kbytes.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:919</i>
		 */
		public static final int GP_STORAGEINFO_FREESPACEKBYTES = (int)(1 << 7);
		/**
		 * < \brief Free space in images.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:920</i>
		 */
		public static final int GP_STORAGEINFO_FREESPACEIMAGES = (int)(1 << 8);
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:934</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:934</i><br>
	 * enum values
	 */
	public static interface CameraStorageType {
		/**
		 * < \brief Unknown storage type.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:929</i>
		 */
		public static final int GP_STORAGEINFO_ST_UNKNOWN = (int)0;
		/**
		 * < \brief A fixed ROM storage.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:930</i>
		 */
		public static final int GP_STORAGEINFO_ST_FIXED_ROM = (int)1;
		/**
		 * < \brief A removable ROM storage.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:931</i>
		 */
		public static final int GP_STORAGEINFO_ST_REMOVABLE_ROM = (int)2;
		/**
		 * < \brief A fixed RAM storage. (e.g. SDRAM)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:932</i>
		 */
		public static final int GP_STORAGEINFO_ST_FIXED_RAM = (int)3;
		/**
		 * < \brief A removable RAM storage. (any kind of cards etc)<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:933</i>
		 */
		public static final int GP_STORAGEINFO_ST_REMOVABLE_RAM = (int)4;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:945</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:945</i><br>
	 * enum values
	 */
	public static interface CameraStorageAccessType {
		/**
		 * < \brief Storage is Read / Write.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:942</i>
		 */
		public static final int GP_STORAGEINFO_AC_READWRITE = (int)0;
		/**
		 * < \brief Storage is Ready Only.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:943</i>
		 */
		public static final int GP_STORAGEINFO_AC_READONLY = (int)1;
		/**
		 * < \brief Storage is Ready Only, but allows Delete.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:944</i>
		 */
		public static final int GP_STORAGEINFO_AC_READONLY_WITH_DELETE = (int)2;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:957</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:957</i><br>
	 * enum values
	 */
	public static interface CameraStorageFilesystemType {
		/**
		 * < \brief Undefined or unknown filesystem hierarchy.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:953</i>
		 */
		public static final int GP_STORAGEINFO_FST_UNDEFINED = (int)0;
		/**
		 * < \brief Generic flat storage (all in 1 directory).<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:954</i>
		 */
		public static final int GP_STORAGEINFO_FST_GENERICFLAT = (int)1;
		/**
		 * < \brief Generic tree hierarchy.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:955</i>
		 */
		public static final int GP_STORAGEINFO_FST_GENERICHIERARCHICAL = (int)2;
		/**
		 * < \brief DCIM style storage.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:956</i>
		 */
		public static final int GP_STORAGEINFO_FST_DCF = (int)3;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1110</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1110</i><br>
	 * enum values
	 */
	public static interface CameraCaptureType {
		/**
		 * < \brief Capture an image.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1107</i>
		 */
		public static final int GP_CAPTURE_IMAGE = (int)0;
		/**
		 * < \brief Capture a movie.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1108</i>
		 */
		public static final int GP_CAPTURE_MOVIE = (int)1;
		/**
		 * < \brief Capture audio.<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1109</i>
		 */
		public static final int GP_CAPTURE_SOUND = (int)2;
	};
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1123</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1123</i><br>
	 * enum values
	 */
	public static interface CameraEventType {
		/**
		 * < unknown and unhandled event<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1118</i>
		 */
		public static final int GP_EVENT_UNKNOWN = (int)0;
		/**
		 * < timeout, no arguments<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1119</i>
		 */
		public static final int GP_EVENT_TIMEOUT = (int)1;
		/**
		 * < CameraFilePath* = file path on camfs<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1120</i>
		 */
		public static final int GP_EVENT_FILE_ADDED = (int)2;
		/**
		 * < CameraFilePath* = folder on camfs<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1121</i>
		 */
		public static final int GP_EVENT_FOLDER_ADDED = (int)3;
		/**
		 * < last capture is complete<br>
		 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1122</i>
		 */
		public static final int GP_EVENT_CAPTURE_COMPLETE = (int)4;
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_WMA = (String)"audio/x-wma";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_UPDATE = (int)-37;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_USB_CLEAR_HALT = (int)-51;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_NOT_SUPPORTED = (int)-6;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_NO_SPACE = (int)-115;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_UNKNOWN_PORT = (int)-5;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_PATH_NOT_ABSOLUTE = (int)-111;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_CAMERA_BUSY = (int)-110;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_LIBRARY = (int)-4;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_OS_FAILURE = (int)-114;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_WAV = (String)"audio/wav";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_TIFF = (String)"image/tiff";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR = (int)-1;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_AVI = (String)"video/x-msvideo";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_MODEL_NOT_FOUND = (int)-105;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_USB_CLAIM = (int)-53;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_WRITE = (int)-35;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_SERIAL_SPEED = (int)-41;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_CAMERA_ERROR = (int)-113;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_FIXED_LIMIT_EXCEEDED = (int)-8;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_OK = (int)0;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port.h</i>
	public static final boolean FALSE = (boolean)(1 == 0);
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_USB_FIND = (int)-52;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_QUICKTIME = (String)"video/quicktime";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_RW2 = (String)"image/x-panasonic-raw2";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_PNG = (String)"image/png";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_PNM = (String)"image/x-portable-anymap";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_ASF = (String)"audio/x-asf";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_NO_MEMORY = (int)-3;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_PPM = (String)"image/x-portable-pixmap";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_CANCEL = (int)-112;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_SUPPORTED_USB = (int)-21;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_MPEG = (String)"video/mpeg";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_CORRUPTED_DATA = (int)-102;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_JPEG = (String)"image/jpeg";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_LOCK = (int)-60;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_DIRECTORY_EXISTS = (int)-109;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_OGG = (String)"application/ogg";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port.h</i>
	public static final int GP_PORT_MAX_BUF_LEN = (int)4096;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_FILE_NOT_FOUND = (int)-108;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_DIRECTORY_NOT_FOUND = (int)-107;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_PGM = (String)"image/x-portable-graymap";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_MP3 = (String)"audio/mpeg";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO = (int)-7;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_HAL = (int)-70;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_RAW = (String)"image/x-raw";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_BMP = (String)"image/bmp";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_READ = (int)-34;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_BAD_PARAMETERS = (int)-2;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-result.h</i>
	public static final int GP_ERROR_FILE_EXISTS = (int)-103;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_CR2 = (String)"image/x-canon-cr2";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_TIMEOUT = (int)-10;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_EXIF = (String)"application/x-exif";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port.h</i>
	public static final boolean TRUE = (boolean)(0 == 0);
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_AVCHD = (String)"video/mp2t";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_UNKNOWN = (String)"application/octet-stream";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-file.h</i>
	public static final String GP_MIME_CRW = (String)"image/x-canon-raw";
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_INIT = (int)-31;
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h</i>
	public static final int GP_ERROR_IO_SUPPORTED_SERIAL = (int)-20;
	/**
	 * \brief Logging function hook<br>
	 * <br>
	 * This is the function frontends can use to receive logging information<br>
	 * from the libgphoto2 framework. It is set using gp_log_add_func() and <br>
	 * removed using gp_log_remove_func() and will then receive the logging<br>
	 * messages of the level specified.<br>
	 * * \param level the log level of the passed message, as set by the camera driver or libgphoto2<br>
	 * \param domain the logging domain as set by the camera driver, or libgphoto2 function<br>
	 * \param format the printf style format string of the logmessage, without linefeed<br>
	 * \param args the arguments as va_list, depending on the format string<br>
	 * \param data the caller private data that was passed to gp_log_add_func()<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2.h:263</i>
	 */
	/**
	 * \brief Logging function hook<br>
	 * <br>
	 * This is the function frontends can use to receive logging information<br>
	 * from the libgphoto2 framework. It is set using gp_log_add_func() and <br>
	 * removed using gp_log_remove_func() and will then receive the logging<br>
	 * messages of the level specified.<br>
	 * * \param level the log level of the passed message, as set by the camera driver or libgphoto2<br>
	 * \param domain the logging domain as set by the camera driver, or libgphoto2 function<br>
	 * \param format the printf style format string of the logmessage, without linefeed<br>
	 * \param args the arguments as va_list, depending on the format string<br>
	 * \param data the caller private data that was passed to gp_log_add_func()<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2.h:263</i>
	 */
	public interface GPLogFunc extends Callback {
		void apply(int level, Pointer domain, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/**
	 * Type of a signal handler.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2.h:292</i>
	 */
	/**
	 * Type of a signal handler.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2.h:292</i>
	 */
	public interface __kernel_sighandler_t extends Callback {
		void apply(int int1);
	};
	/**
	 * Functions<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:484</i>
	 */
	/**
	 * Functions<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:484</i>
	 */
	public interface GPContextIdleFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:485</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:485</i>
	public interface GPContextErrorFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:486</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:486</i>
	public interface GPContextStatusFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:487</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:487</i>
	public interface GPContextMessageFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:488</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:488</i>
	public interface GPContextQuestionFunc extends Callback {
		int apply(Gphoto2Library.GPContext context, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:489</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:489</i>
	public interface GPContextCancelFunc extends Callback {
		int apply(Gphoto2Library.GPContext context, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:490</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:490</i>
	public interface GPContextProgressStartFunc extends Callback {
		int apply(Gphoto2Library.GPContext context, float target, Pointer format, Gphoto2Library.va_list args, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:491</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:491</i>
	public interface GPContextProgressUpdateFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, int id, float current, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:492</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:492</i>
	public interface GPContextProgressStopFunc extends Callback {
		void apply(Gphoto2Library.GPContext context, int id, Pointer data);
	};
	/**
	 * \brief Callback handler for Button widgets.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:744</i>
	 */
	/**
	 * \brief Callback handler for Button widgets.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:744</i>
	 */
	public interface CameraWidgetCallback extends Callback {
		int apply(Camera CameraPtr1, Gphoto2Library.CameraWidget CameraWidgetPtr1, Gphoto2Library.GPContext GPContextPtr1);
	};
	/**
	 * Listings<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1011</i>
	 */
	/**
	 * Listings<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1011</i>
	 */
	public interface CameraFilesystemListFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraList list, Pointer data, Gphoto2Library.GPContext context);
	};
	/**
	 * File information<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1019</i>
	 */
	/**
	 * File information<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1019</i>
	 */
	public interface CameraFilesystemSetInfoFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, CameraFileInfo.ByValue info, Pointer data, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1020</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1020</i>
	public interface CameraFilesystemGetInfoFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, CameraFileInfo info, Pointer data, Gphoto2Library.GPContext context);
	};
	/**
	 * Files<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1028</i>
	 */
	/**
	 * Files<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1028</i>
	 */
	public interface CameraFilesystemGetFileFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, int type, Gphoto2Library.CameraFile file, Pointer data, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1029</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1029</i>
	public interface CameraFilesystemDeleteFileFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, Pointer data, Gphoto2Library.GPContext context);
	};
	/**
	 * Folders<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1037</i>
	 */
	/**
	 * Folders<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1037</i>
	 */
	public interface CameraFilesystemPutFileFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraFile file, Pointer data, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1038</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1038</i>
	public interface CameraFilesystemDeleteAllFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer data, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1039</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1039</i>
	public interface CameraFilesystemDirFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer name, Pointer data, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1042</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1042</i>
	public interface CameraFilesystemStorageInfoFunc extends Callback {
		int apply(Gphoto2Library.CameraFilesystem fs, PointerByReference CameraStorageInformationPtrPtr1, IntByReference nrofstorageinformations, Pointer data, Gphoto2Library.GPContext context);
	};
	/**
	 * \brief The camera exit function<br>
	 * * \param camera the current camera<br>
	 * \param context a #GPContext<br>
	 * * This functions is called in the camera driver for closing the camera<br>
	 * connection. It should do the necessary cleanups of the internal camera<br>
	 * state, free allocated private structures and similar.<br>
	 * * The driver does not need to close the #GPPort, this is done by libgphoto2<br>
	 * itself.<br>
	 * * Implement this function if you need to any of this stuff, otherwise leave<br>
	 * it out.<br>
	 * * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1137</i>
	 */
	/**
	 * \brief The camera exit function<br>
	 * * \param camera the current camera<br>
	 * \param context a #GPContext<br>
	 * * This functions is called in the camera driver for closing the camera<br>
	 * connection. It should do the necessary cleanups of the internal camera<br>
	 * state, free allocated private structures and similar.<br>
	 * * The driver does not need to close the #GPPort, this is done by libgphoto2<br>
	 * itself.<br>
	 * * Implement this function if you need to any of this stuff, otherwise leave<br>
	 * it out.<br>
	 * * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1137</i>
	 */
	public interface CameraExitFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.GPContext context);
	};
	/**
	 * \brief Get a configuration tree for the camera and its driver<br>
	 * * \param camera the current camera<br>
	 * \param widget pointer to store the toplevel widget of the tree<br>
	 * \param context the active #GPContext<br>
	 * * A camera driver can support configuration of either its own behaviour<br>
	 * or the camera device itself. To allow a flexible driver framework,<br>
	 * the camera driver provides a generic configuration widget tree to the<br>
	 * frontend, which then renders it, allows user input and sends it back<br>
	 * via the #CameraSetConfigFunc function to have the driver configure itself<br>
	 * or the camera.<br>
	 * * If you do not have configuration ability, there is no need to specify this<br>
	 * function.<br>
	 * * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1153</i>
	 */
	/**
	 * \brief Get a configuration tree for the camera and its driver<br>
	 * * \param camera the current camera<br>
	 * \param widget pointer to store the toplevel widget of the tree<br>
	 * \param context the active #GPContext<br>
	 * * A camera driver can support configuration of either its own behaviour<br>
	 * or the camera device itself. To allow a flexible driver framework,<br>
	 * the camera driver provides a generic configuration widget tree to the<br>
	 * frontend, which then renders it, allows user input and sends it back<br>
	 * via the #CameraSetConfigFunc function to have the driver configure itself<br>
	 * or the camera.<br>
	 * * If you do not have configuration ability, there is no need to specify this<br>
	 * function.<br>
	 * * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1153</i>
	 */
	public interface CameraGetConfigFunc extends Callback {
		int apply(Camera camera, PointerByReference widget, Gphoto2Library.GPContext context);
	};
	/**
	 * \brief Set the configuration in the camera<br>
	 * * \param camera the current camera <br>
	 * \param widget the configuration widget tree that was changed<br>
	 * \param context the active #GPContext<br>
	 * * This function is called in the driver after the configuration is set.<br>
	 * It is called directly after setting the value and might called multiple<br>
	 * times (or never) after just one #CameraGetConfigFunc.<br>
	 * <br>
	 * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1165</i>
	 */
	/**
	 * \brief Set the configuration in the camera<br>
	 * * \param camera the current camera <br>
	 * \param widget the configuration widget tree that was changed<br>
	 * \param context the active #GPContext<br>
	 * * This function is called in the driver after the configuration is set.<br>
	 * It is called directly after setting the value and might called multiple<br>
	 * times (or never) after just one #CameraGetConfigFunc.<br>
	 * <br>
	 * \returns a gphoto error code<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1165</i>
	 */
	public interface CameraSetConfigFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.CameraWidget widget, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1166</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1166</i>
	public interface CameraCaptureFunc extends Callback {
		int apply(Camera camera, int type, CameraFilePath path, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1167</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1167</i>
	public interface CameraCapturePreviewFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1168</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1168</i>
	public interface CameraSummaryFunc extends Callback {
		int apply(Camera camera, CameraText text, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1169</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1169</i>
	public interface CameraManualFunc extends Callback {
		int apply(Camera camera, CameraText text, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1170</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1170</i>
	public interface CameraAboutFunc extends Callback {
		int apply(Camera camera, CameraText text, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1171</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1171</i>
	public interface CameraWaitForEvent extends Callback {
		int apply(Camera camera, int timeout, IntByReference eventtype, PointerByReference eventdata, Gphoto2Library.GPContext context);
	};
	/**
	 * \param camera a \ref Camera object<br>
	 * \param context a \ref GPContext object<br>
	 * \return a gphoto2 error code<br>
	 * * Implement this function in the camera driver if the camera needs to<br>
	 * be initialized before or reset the after each access from<br>
	 * libgphoto2.<br>
	 * * For example, you would probably set the speed to the highest one <br>
	 * right before downloading an image, and reset it to the default speed <br>
	 * afterwards so that other programs will not be affected by this speed<br>
	 * change.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1184</i>
	 */
	/**
	 * \param camera a \ref Camera object<br>
	 * \param context a \ref GPContext object<br>
	 * \return a gphoto2 error code<br>
	 * * Implement this function in the camera driver if the camera needs to<br>
	 * be initialized before or reset the after each access from<br>
	 * libgphoto2.<br>
	 * * For example, you would probably set the speed to the highest one <br>
	 * right before downloading an image, and reset it to the default speed <br>
	 * afterwards so that other programs will not be affected by this speed<br>
	 * change.<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1184</i>
	 */
	public interface CameraPrePostFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.GPContext context);
	};
	/**
	 * \name Some cameras need 'keep-alive-messages'. <br>
	 * @{<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1331</i>
	 */
	/**
	 * \name Some cameras need 'keep-alive-messages'. <br>
	 * @{<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1331</i>
	 */
	public interface CameraTimeoutFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.GPContext context);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1332</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1332</i>
	public interface CameraTimeoutStartFunc extends Callback {
		int apply(Camera camera, int timeout, Gphoto2Library.CameraTimeoutFunc func, Pointer data);
	};
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1333</i>
	/// <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1333</i>
	public interface CameraTimeoutStopFunc extends Callback {
		void apply(Camera camera, int id, Pointer data);
	};
	/**
	 * \brief Returns a unique id for the camera driver.<br>
	 * * \param id a #CameraText<br>
	 * \return a gphoto2 error code<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1348</i>
	 */
	/**
	 * \brief Returns a unique id for the camera driver.<br>
	 * * \param id a #CameraText<br>
	 * \return a gphoto2 error code<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1348</i>
	 */
	public interface CameraLibraryIdFunc extends Callback {
		int apply(CameraText id);
	};
	/**
	 * \brief Adds the abilities of the supported models to the supplied list.<br>
	 * * \param list a #CameraAbilitiesList<br>
	 * \return a gphoto2 error code<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1355</i>
	 */
	/**
	 * \brief Adds the abilities of the supported models to the supplied list.<br>
	 * * \param list a #CameraAbilitiesList<br>
	 * \return a gphoto2 error code<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1355</i>
	 */
	public interface CameraLibraryAbilitiesFunc extends Callback {
		int apply(Gphoto2Library.CameraAbilitiesList list);
	};
	/**
	 * \brief Initializes the camera.<br>
	 * * \param camera a #Camera<br>
	 * \param context a #GPContext<br>
	 * \return a gphoto2 error code<br>
	 * * The camera driver will establish a first connection<br>
	 * to the camera and configure the camera variable (i.e. using <br>
	 * #gp_filesystem_set_list_funcs or #gp_port_get_settings).<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1366</i>
	 */
	/**
	 * \brief Initializes the camera.<br>
	 * * \param camera a #Camera<br>
	 * \param context a #GPContext<br>
	 * \return a gphoto2 error code<br>
	 * * The camera driver will establish a first connection<br>
	 * to the camera and configure the camera variable (i.e. using <br>
	 * #gp_filesystem_set_list_funcs or #gp_port_get_settings).<br>
	 * *<br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1366</i>
	 */
	public interface CameraLibraryInitFunc extends Callback {
		int apply(Camera camera, Gphoto2Library.GPContext context);
	};
	/**
	 * Original signature : <code>int gp_port_info_list_new(GPPortInfoList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:34</i><br>
	 * @deprecated use the safer method {@link #gp_port_info_list_new(com.angryelectron.libgphoto2.Gphoto2Library.GPPortInfoList[])} instead
	 */
	@Deprecated 
	int gp_port_info_list_new(PointerByReference list);
	/**
	 * Original signature : <code>int gp_port_info_list_new(GPPortInfoList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:34</i>
	 */
	int gp_port_info_list_new(Gphoto2Library.GPPortInfoList list[]);
	/**
	 * Original signature : <code>int gp_port_info_list_free(GPPortInfoList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:36</i>
	 */
	int gp_port_info_list_free(Gphoto2Library.GPPortInfoList list);
	/**
	 * Original signature : <code>int gp_port_info_list_append(GPPortInfoList*, GPPortInfo)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:38</i>
	 */
	int gp_port_info_list_append(Gphoto2Library.GPPortInfoList list, GPPortInfo.ByValue info);
	/**
	 * Original signature : <code>int gp_port_info_list_load(GPPortInfoList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:40</i>
	 */
	int gp_port_info_list_load(Gphoto2Library.GPPortInfoList list);
	/**
	 * Original signature : <code>int gp_port_info_list_count(GPPortInfoList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:42</i>
	 */
	int gp_port_info_list_count(Gphoto2Library.GPPortInfoList list);
	/**
	 * Original signature : <code>int gp_port_info_list_lookup_path(GPPortInfoList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:44</i><br>
	 * @deprecated use the safer methods {@link #gp_port_info_list_lookup_path(com.angryelectron.libgphoto2.Gphoto2Library.GPPortInfoList, java.lang.String)} and {@link #gp_port_info_list_lookup_path(com.angryelectron.libgphoto2.Gphoto2Library.GPPortInfoList, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_port_info_list_lookup_path(Gphoto2Library.GPPortInfoList list, Pointer path);
	/**
	 * Original signature : <code>int gp_port_info_list_lookup_path(GPPortInfoList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:44</i>
	 */
	int gp_port_info_list_lookup_path(Gphoto2Library.GPPortInfoList list, String path);
	/**
	 * Original signature : <code>int gp_port_info_list_lookup_name(GPPortInfoList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:46</i><br>
	 * @deprecated use the safer methods {@link #gp_port_info_list_lookup_name(com.angryelectron.libgphoto2.Gphoto2Library.GPPortInfoList, java.lang.String)} and {@link #gp_port_info_list_lookup_name(com.angryelectron.libgphoto2.Gphoto2Library.GPPortInfoList, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_port_info_list_lookup_name(Gphoto2Library.GPPortInfoList list, Pointer name);
	/**
	 * Original signature : <code>int gp_port_info_list_lookup_name(GPPortInfoList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:46</i>
	 */
	int gp_port_info_list_lookup_name(Gphoto2Library.GPPortInfoList list, String name);
	/**
	 * Original signature : <code>int gp_port_info_list_get_info(GPPortInfoList*, int, GPPortInfo*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:48</i>
	 */
	int gp_port_info_list_get_info(Gphoto2Library.GPPortInfoList list, int n, GPPortInfo info);
	/**
	 * Original signature : <code>char* gp_port_message_codeset(const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:50</i><br>
	 * @deprecated use the safer methods {@link #gp_port_message_codeset(java.lang.String)} and {@link #gp_port_message_codeset(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String gp_port_message_codeset(Pointer charPtr1);
	/**
	 * Original signature : <code>char* gp_port_message_codeset(const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-info-list.h:50</i>
	 */
	String gp_port_message_codeset(String charPtr1);
	/**
	 * Original signature : <code>int gp_port_new(GPPort**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:141</i>
	 */
	int gp_port_new(PointerByReference port);
	/**
	 * Original signature : <code>int gp_port_free(GPPort*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:143</i>
	 */
	int gp_port_free(GPPort port);
	/**
	 * Original signature : <code>int gp_port_set_info(GPPort*, GPPortInfo)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:145</i>
	 */
	int gp_port_set_info(GPPort port, GPPortInfo.ByValue info);
	/**
	 * Original signature : <code>int gp_port_get_info(GPPort*, GPPortInfo*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:147</i>
	 */
	int gp_port_get_info(GPPort port, GPPortInfo info);
	/**
	 * Original signature : <code>int gp_port_open(GPPort*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:149</i>
	 */
	int gp_port_open(GPPort port);
	/**
	 * Original signature : <code>int gp_port_close(GPPort*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:151</i>
	 */
	int gp_port_close(GPPort port);
	/**
	 * Original signature : <code>int gp_port_write(GPPort*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:153</i><br>
	 * @deprecated use the safer methods {@link #gp_port_write(com.angryelectron.libgphoto2.GPPort, java.lang.String, int)} and {@link #gp_port_write(com.angryelectron.libgphoto2.GPPort, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_write(GPPort port, Pointer data, int size);
	/**
	 * Original signature : <code>int gp_port_write(GPPort*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:153</i>
	 */
	int gp_port_write(GPPort port, String data, int size);
	/**
	 * Original signature : <code>int gp_port_read(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:155</i><br>
	 * @deprecated use the safer methods {@link #gp_port_read(com.angryelectron.libgphoto2.GPPort, java.nio.ByteBuffer, int)} and {@link #gp_port_read(com.angryelectron.libgphoto2.GPPort, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_read(GPPort port, Pointer data, int size);
	/**
	 * Original signature : <code>int gp_port_read(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:155</i>
	 */
	int gp_port_read(GPPort port, ByteBuffer data, int size);
	/**
	 * Original signature : <code>int gp_port_check_int(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:157</i><br>
	 * @deprecated use the safer methods {@link #gp_port_check_int(com.angryelectron.libgphoto2.GPPort, java.nio.ByteBuffer, int)} and {@link #gp_port_check_int(com.angryelectron.libgphoto2.GPPort, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_check_int(GPPort port, Pointer data, int size);
	/**
	 * Original signature : <code>int gp_port_check_int(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:157</i>
	 */
	int gp_port_check_int(GPPort port, ByteBuffer data, int size);
	/**
	 * Original signature : <code>int gp_port_check_int_fast(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:159</i><br>
	 * @deprecated use the safer methods {@link #gp_port_check_int_fast(com.angryelectron.libgphoto2.GPPort, java.nio.ByteBuffer, int)} and {@link #gp_port_check_int_fast(com.angryelectron.libgphoto2.GPPort, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_check_int_fast(GPPort port, Pointer data, int size);
	/**
	 * Original signature : <code>int gp_port_check_int_fast(GPPort*, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:159</i>
	 */
	int gp_port_check_int_fast(GPPort port, ByteBuffer data, int size);
	/**
	 * Original signature : <code>int gp_port_get_timeout(GPPort*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:161</i><br>
	 * @deprecated use the safer methods {@link #gp_port_get_timeout(com.angryelectron.libgphoto2.GPPort, java.nio.IntBuffer)} and {@link #gp_port_get_timeout(com.angryelectron.libgphoto2.GPPort, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_port_get_timeout(GPPort port, IntByReference timeout);
	/**
	 * Original signature : <code>int gp_port_get_timeout(GPPort*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:161</i>
	 */
	int gp_port_get_timeout(GPPort port, IntBuffer timeout);
	/**
	 * Original signature : <code>int gp_port_set_timeout(GPPort*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:163</i>
	 */
	int gp_port_set_timeout(GPPort port, int timeout);
	/**
	 * Original signature : <code>int gp_port_set_settings(GPPort*, GPPortSettings)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:165</i>
	 */
	int gp_port_set_settings(GPPort port, GPPortSettings.ByValue settings);
	/**
	 * Original signature : <code>int gp_port_get_settings(GPPort*, GPPortSettings*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:167</i>
	 */
	int gp_port_get_settings(GPPort port, GPPortSettings settings);
	/**
	 * Original signature : <code>int gp_port_get_pin(GPPort*, GPPin, GPLevel*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:192</i><br>
	 * @deprecated use the safer methods {@link #gp_port_get_pin(com.angryelectron.libgphoto2.GPPort, int, java.nio.IntBuffer)} and {@link #gp_port_get_pin(com.angryelectron.libgphoto2.GPPort, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_port_get_pin(GPPort port, int pin, IntByReference level);
	/**
	 * Original signature : <code>int gp_port_get_pin(GPPort*, GPPin, GPLevel*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:192</i>
	 */
	int gp_port_get_pin(GPPort port, int pin, IntBuffer level);
	/**
	 * Original signature : <code>int gp_port_set_pin(GPPort*, GPPin, GPLevel)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:194</i>
	 */
	int gp_port_set_pin(GPPort port, int pin, int level);
	/**
	 * Original signature : <code>int gp_port_send_break(GPPort*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:196</i>
	 */
	int gp_port_send_break(GPPort port, int duration);
	/**
	 * Original signature : <code>int gp_port_flush(GPPort*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:198</i>
	 */
	int gp_port_flush(GPPort port, int direction);
	/**
	 * Original signature : <code>int gp_port_usb_find_device(GPPort*, int, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:200</i>
	 */
	int gp_port_usb_find_device(GPPort port, int idvendor, int idproduct);
	/**
	 * Original signature : <code>int gp_port_usb_find_device_by_class(GPPort*, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:202</i>
	 */
	int gp_port_usb_find_device_by_class(GPPort port, int mainclass, int subclass, int protocol);
	/**
	 * Original signature : <code>int gp_port_usb_clear_halt(GPPort*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:204</i>
	 */
	int gp_port_usb_clear_halt(GPPort port, int ep);
	/**
	 * Original signature : <code>int gp_port_usb_msg_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:206</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_write(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_write(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_write(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:206</i>
	 */
	int gp_port_usb_msg_write(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:208</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_read(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_read(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_read(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:208</i>
	 */
	int gp_port_usb_msg_read(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_interface_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:210</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_interface_write(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_interface_write(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_interface_write(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_interface_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:210</i>
	 */
	int gp_port_usb_msg_interface_write(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_interface_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:212</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_interface_read(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_interface_read(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_interface_read(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_interface_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:212</i>
	 */
	int gp_port_usb_msg_interface_read(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_class_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:214</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_class_write(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_class_write(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_class_write(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_class_write(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:214</i>
	 */
	int gp_port_usb_msg_class_write(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_class_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:216</i><br>
	 * @deprecated use the safer methods {@link #gp_port_usb_msg_class_read(com.angryelectron.libgphoto2.GPPort, int, int, int, java.nio.ByteBuffer, int)} and {@link #gp_port_usb_msg_class_read(com.angryelectron.libgphoto2.GPPort, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_usb_msg_class_read(GPPort port, int request, int value, int index, Pointer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_usb_msg_class_read(GPPort*, int, int, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:216</i>
	 */
	int gp_port_usb_msg_class_read(GPPort port, int request, int value, int index, ByteBuffer bytes, int size);
	/**
	 * Original signature : <code>int gp_port_seek(GPPort*, int, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:218</i>
	 */
	int gp_port_seek(GPPort port, int offset, int whence);
	/**
	 * Original signature : <code>int gp_port_send_scsi_cmd(GPPort*, int, char*, int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:220</i><br>
	 * @deprecated use the safer methods {@link #gp_port_send_scsi_cmd(com.angryelectron.libgphoto2.GPPort, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int)} and {@link #gp_port_send_scsi_cmd(com.angryelectron.libgphoto2.GPPort, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_port_send_scsi_cmd(GPPort port, int to_dev, Pointer cmd, int cmd_size, Pointer sense, int sense_size, Pointer data, int data_size);
	/**
	 * Original signature : <code>int gp_port_send_scsi_cmd(GPPort*, int, char*, int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:220</i>
	 */
	int gp_port_send_scsi_cmd(GPPort port, int to_dev, ByteBuffer cmd, int cmd_size, ByteBuffer sense, int sense_size, ByteBuffer data, int data_size);
	/**
	 * Error reporting<br>
	 * Original signature : <code>int gp_port_set_error(GPPort*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:225</i><br>
	 * @deprecated use the safer methods {@link #gp_port_set_error(com.angryelectron.libgphoto2.GPPort, java.lang.String, java.lang.Object)} and {@link #gp_port_set_error(com.angryelectron.libgphoto2.GPPort, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int gp_port_set_error(GPPort port, Pointer format, Object... varargs);
	/**
	 * Error reporting<br>
	 * Original signature : <code>int gp_port_set_error(GPPort*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:225</i>
	 */
	int gp_port_set_error(GPPort port, String format, Object... varargs);
	/**
	 * Original signature : <code>char* gp_port_get_error(GPPort*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port.h:227</i>
	 */
	String gp_port_get_error(GPPort port);
	/**
	 * Original signature : <code>int gp_log_add_func(GPLogLevel, GPLogFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:265</i>
	 */
	int gp_log_add_func(int level, Gphoto2Library.GPLogFunc func, Pointer data);
	/**
	 * Original signature : <code>int gp_log_remove_func(int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:267</i>
	 */
	int gp_log_remove_func(int id);
	/**
	 * Logging<br>
	 * Original signature : <code>void gp_log(GPLogLevel, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:272</i><br>
	 * @deprecated use the safer methods {@link #gp_log(int, java.lang.String, java.lang.String, java.lang.Object)} and {@link #gp_log(int, com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void gp_log(int level, Pointer domain, Pointer format, Object... varargs);
	/**
	 * Logging<br>
	 * Original signature : <code>void gp_log(GPLogLevel, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:272</i>
	 */
	void gp_log(int level, String domain, String format, Object... varargs);
	/**
	 * Original signature : <code>void gp_logv(GPLogLevel, const char*, const char*, va_list)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:274</i><br>
	 * @deprecated use the safer methods {@link #gp_logv(int, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.va_list)} and {@link #gp_logv(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.va_list)} instead
	 */
	@Deprecated 
	void gp_logv(int level, Pointer domain, Pointer format, Gphoto2Library.va_list args);
	/**
	 * Original signature : <code>void gp_logv(GPLogLevel, const char*, const char*, va_list)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:274</i>
	 */
	void gp_logv(int level, String domain, String format, Gphoto2Library.va_list args);
	/**
	 * Original signature : <code>void gp_log_data(const char*, const char*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:276</i><br>
	 * @deprecated use the safer methods {@link #gp_log_data(java.lang.String, java.lang.String, int)} and {@link #gp_log_data(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void gp_log_data(Pointer domain, Pointer data, int size);
	/**
	 * Original signature : <code>void gp_log_data(const char*, const char*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-log.h:276</i>
	 */
	void gp_log_data(String domain, String data, int size);
	/**
	 * Original signature : <code>char* gp_port_result_as_string(int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-port-result.h:278</i>
	 */
	String gp_port_result_as_string(int result);
	/**
	 * Original signature : <code>int gp_file_new(CameraFile**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:390</i><br>
	 * @deprecated use the safer method {@link #gp_file_new(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile[])} instead
	 */
	@Deprecated 
	int gp_file_new(PointerByReference file);
	/**
	 * Original signature : <code>int gp_file_new(CameraFile**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:390</i>
	 */
	int gp_file_new(Gphoto2Library.CameraFile file[]);
	/**
	 * Original signature : <code>int gp_file_new_from_fd(CameraFile**, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:392</i><br>
	 * @deprecated use the safer method {@link #gp_file_new_from_fd(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile[], int)} instead
	 */
	@Deprecated 
	int gp_file_new_from_fd(PointerByReference file, int fd);
	/**
	 * Original signature : <code>int gp_file_new_from_fd(CameraFile**, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:392</i>
	 */
	int gp_file_new_from_fd(Gphoto2Library.CameraFile file[], int fd);
	/**
	 * Original signature : <code>int gp_file_ref(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:394</i>
	 */
	int gp_file_ref(Gphoto2Library.CameraFile file);
	/**
	 * Original signature : <code>int gp_file_unref(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:396</i>
	 */
	int gp_file_unref(Gphoto2Library.CameraFile file);
	/**
	 * Original signature : <code>int gp_file_free(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:398</i>
	 */
	int gp_file_free(Gphoto2Library.CameraFile file);
	/**
	 * "Do not use those"<br>
	 * * These functions probably were originally intended for internal use only.<br>
	 * However, due to<br>
	 *   - the lack of good documentation<br>
	 *   - this being the obvious way to save a file<br>
	 *   - the fact that libgphoto2 has been exporting all its internal<br>
	 *     symbols for years (until 2005-06)<br>
	 *   - our in-house frontends gphoto2 and gtkam using them<br>
	 * a number of external frontends started to use these functions, as<br>
	 * of 2005-06:<br>
	 *    - digikam<br>
	 *    - f-spot<br>
	 *    - gthumb<br>
	 * But a few frontends can live without it (and thus are likely to<br>
	 * use the correct API):<br>
	 *    - flphoto<br>
	 *    - kamera<br>
	 * * So we're going to phase these functions out over the next year or<br>
	 * so, going the GTK way of keeping the ABI but breaking the API. So<br>
	 * we'll continue to export functionally equivalent functions, but the<br>
	 * header files will not contain definitions for you to use any more.<br>
	 * Original signature : <code>int gp_file_open(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:423</i><br>
	 * @deprecated use the safer methods {@link #gp_file_open(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String)} and {@link #gp_file_open(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_file_open(Gphoto2Library.CameraFile file, Pointer filename);
	/**
	 * "Do not use those"<br>
	 * * These functions probably were originally intended for internal use only.<br>
	 * However, due to<br>
	 *   - the lack of good documentation<br>
	 *   - this being the obvious way to save a file<br>
	 *   - the fact that libgphoto2 has been exporting all its internal<br>
	 *     symbols for years (until 2005-06)<br>
	 *   - our in-house frontends gphoto2 and gtkam using them<br>
	 * a number of external frontends started to use these functions, as<br>
	 * of 2005-06:<br>
	 *    - digikam<br>
	 *    - f-spot<br>
	 *    - gthumb<br>
	 * But a few frontends can live without it (and thus are likely to<br>
	 * use the correct API):<br>
	 *    - flphoto<br>
	 *    - kamera<br>
	 * * So we're going to phase these functions out over the next year or<br>
	 * so, going the GTK way of keeping the ABI but breaking the API. So<br>
	 * we'll continue to export functionally equivalent functions, but the<br>
	 * header files will not contain definitions for you to use any more.<br>
	 * Original signature : <code>int gp_file_open(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:423</i>
	 */
	int gp_file_open(Gphoto2Library.CameraFile file, String filename);
	/**
	 * Original signature : <code>int gp_file_save(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:425</i><br>
	 * @deprecated use the safer methods {@link #gp_file_save(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String)} and {@link #gp_file_save(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_file_save(Gphoto2Library.CameraFile file, Pointer filename);
	/**
	 * Original signature : <code>int gp_file_save(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:425</i>
	 */
	int gp_file_save(Gphoto2Library.CameraFile file, String filename);
	/**
	 * Original signature : <code>int gp_file_clean(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:427</i>
	 */
	int gp_file_clean(Gphoto2Library.CameraFile file);
	/**
	 * Original signature : <code>int gp_file_copy(CameraFile*, CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:429</i>
	 */
	int gp_file_copy(Gphoto2Library.CameraFile destination, Gphoto2Library.CameraFile source);
	/**
	 * Original signature : <code>int gp_file_set_name(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:431</i><br>
	 * @deprecated use the safer methods {@link #gp_file_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String)} and {@link #gp_file_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_file_set_name(Gphoto2Library.CameraFile file, Pointer name);
	/**
	 * Original signature : <code>int gp_file_set_name(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:431</i>
	 */
	int gp_file_set_name(Gphoto2Library.CameraFile file, String name);
	/**
	 * Original signature : <code>int gp_file_get_name(CameraFile*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:433</i><br>
	 * @deprecated use the safer methods {@link #gp_file_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String[])} and {@link #gp_file_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_file_get_name(Gphoto2Library.CameraFile file, PointerByReference name);
	/**
	 * Original signature : <code>int gp_file_get_name(CameraFile*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:433</i>
	 */
	int gp_file_get_name(Gphoto2Library.CameraFile file, String name[]);
	/**
	 * Original signature : <code>int gp_file_set_mime_type(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:435</i><br>
	 * @deprecated use the safer methods {@link #gp_file_set_mime_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String)} and {@link #gp_file_set_mime_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_file_set_mime_type(Gphoto2Library.CameraFile file, Pointer mime_type);
	/**
	 * Original signature : <code>int gp_file_set_mime_type(CameraFile*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:435</i>
	 */
	int gp_file_set_mime_type(Gphoto2Library.CameraFile file, String mime_type);
	/**
	 * Original signature : <code>int gp_file_get_mime_type(CameraFile*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:437</i><br>
	 * @deprecated use the safer methods {@link #gp_file_get_mime_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String[])} and {@link #gp_file_get_mime_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_file_get_mime_type(Gphoto2Library.CameraFile file, PointerByReference mime_type);
	/**
	 * Original signature : <code>int gp_file_get_mime_type(CameraFile*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:437</i>
	 */
	int gp_file_get_mime_type(Gphoto2Library.CameraFile file, String mime_type[]);
	/**
	 * Original signature : <code>int gp_file_set_type(CameraFile*, CameraFileType)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:439</i>
	 */
	int gp_file_set_type(Gphoto2Library.CameraFile file, int type);
	/**
	 * Original signature : <code>int gp_file_get_type(CameraFile*, CameraFileType*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:441</i><br>
	 * @deprecated use the safer methods {@link #gp_file_get_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.nio.IntBuffer)} and {@link #gp_file_get_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_file_get_type(Gphoto2Library.CameraFile file, IntByReference type);
	/**
	 * Original signature : <code>int gp_file_get_type(CameraFile*, CameraFileType*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:441</i>
	 */
	int gp_file_get_type(Gphoto2Library.CameraFile file, IntBuffer type);
	/**
	 * Original signature : <code>int gp_file_set_mtime(CameraFile*, time_t)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:443</i>
	 */
	int gp_file_set_mtime(Gphoto2Library.CameraFile file, Gphoto2Library.time_t mtime);
	/**
	 * Original signature : <code>int gp_file_get_mtime(CameraFile*, time_t*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:445</i>
	 */
	int gp_file_get_mtime(Gphoto2Library.CameraFile file, Gphoto2Library.time_t mtime);
	/**
	 * Original signature : <code>int gp_file_detect_mime_type(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:447</i>
	 */
	int gp_file_detect_mime_type(Gphoto2Library.CameraFile file);
	/**
	 * Original signature : <code>int gp_file_adjust_name_for_mime_type(CameraFile*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:449</i>
	 */
	int gp_file_adjust_name_for_mime_type(Gphoto2Library.CameraFile file);
	/**
	 * Original signature : <code>int gp_file_append(CameraFile*, const char*, unsigned long)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:451</i><br>
	 * @deprecated use the safer methods {@link #gp_file_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String, com.sun.jna.NativeLong)} and {@link #gp_file_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int gp_file_append(Gphoto2Library.CameraFile CameraFilePtr1, Pointer data, NativeLong size);
	/**
	 * Original signature : <code>int gp_file_append(CameraFile*, const char*, unsigned long)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:451</i>
	 */
	int gp_file_append(Gphoto2Library.CameraFile CameraFilePtr1, String data, NativeLong size);
	/**
	 * Original signature : <code>int gp_file_slurp(CameraFile*, char*, size_t, size_t*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:453</i><br>
	 * @deprecated use the safer methods {@link #gp_file_slurp(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link #gp_file_slurp(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} instead
	 */
	@Deprecated 
	//int gp_file_slurp(Gphoto2Library.CameraFile CameraFilePtr1, Pointer data, NativeSize size, NativeSizeByReference readlen);
	/**
	 * Original signature : <code>int gp_file_slurp(CameraFile*, char*, size_t, size_t*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:453</i>
	 */
	//int gp_file_slurp(Gphoto2Library.CameraFile CameraFilePtr1, ByteBuffer data, NativeSize size, NativeSizeByReference readlen);
	/**
	 * Original signature : <code>int gp_file_set_data_and_size(CameraFile*, char*, unsigned long)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:455</i><br>
	 * @deprecated use the safer methods {@link #gp_file_set_data_and_size(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #gp_file_set_data_and_size(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	//@Deprecated 
	//int gp_file_set_data_and_size(Gphoto2Library.CameraFile CameraFilePtr1, Pointer data, NativeLong size);
	/**
	 * Original signature : <code>int gp_file_set_data_and_size(CameraFile*, char*, unsigned long)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:455</i>
	 */
	int gp_file_set_data_and_size(Gphoto2Library.CameraFile CameraFilePtr1, ByteBuffer data, NativeLong size);
	/**
	 * Original signature : <code>int gp_file_get_data_and_size(CameraFile*, const char**, unsigned long*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:457</i><br>
	 * @deprecated use the safer methods {@link #gp_file_get_data_and_size(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, java.lang.String[], com.sun.jna.ptr.NativeLongByReference)} and {@link #gp_file_get_data_and_size(com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int gp_file_get_data_and_size(Gphoto2Library.CameraFile CameraFilePtr1, PointerByReference data, NativeLongByReference size);
	/**
	 * Original signature : <code>int gp_file_get_data_and_size(CameraFile*, const char**, unsigned long*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-file.h:457</i>
	 */
	int gp_file_get_data_and_size(Gphoto2Library.CameraFile CameraFilePtr1, String data[], NativeLongByReference size);
	/**
	 * Original signature : <code>GPContext* gp_context_new()</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:468</i>
	 */
	Gphoto2Library.GPContext gp_context_new();
	/**
	 * Original signature : <code>void gp_context_ref(GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:470</i>
	 */
	void gp_context_ref(Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>void gp_context_unref(GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:472</i>
	 */
	void gp_context_unref(Gphoto2Library.GPContext context);
	/**
	 * Setting those functions (frontends)<br>
	 * Original signature : <code>void gp_context_set_idle_func(GPContext*, GPContextIdleFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:497</i>
	 */
	void gp_context_set_idle_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextIdleFunc func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_progress_funcs(GPContext*, GPContextProgressStartFunc, GPContextProgressUpdateFunc, GPContextProgressStopFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:499</i>
	 */
	void gp_context_set_progress_funcs(Gphoto2Library.GPContext context, Gphoto2Library.GPContextProgressStartFunc start_func, Gphoto2Library.GPContextProgressUpdateFunc update_func, Gphoto2Library.GPContextProgressStopFunc stop_func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_error_func(GPContext*, GPContextErrorFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:501</i>
	 */
	void gp_context_set_error_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextErrorFunc func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_status_func(GPContext*, GPContextStatusFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:503</i>
	 */
	void gp_context_set_status_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextStatusFunc func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_question_func(GPContext*, GPContextQuestionFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:505</i>
	 */
	void gp_context_set_question_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextQuestionFunc func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_cancel_func(GPContext*, GPContextCancelFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:507</i>
	 */
	void gp_context_set_cancel_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextCancelFunc func, Pointer data);
	/**
	 * Original signature : <code>void gp_context_set_message_func(GPContext*, GPContextMessageFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:509</i>
	 */
	void gp_context_set_message_func(Gphoto2Library.GPContext context, Gphoto2Library.GPContextMessageFunc func, Pointer data);
	/**
	 * Calling those functions (backends)<br>
	 * Original signature : <code>void gp_context_idle(GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:514</i>
	 */
	void gp_context_idle(Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>void gp_context_error(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:516</i><br>
	 * @deprecated use the safer methods {@link #gp_context_error(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, java.lang.String, java.lang.Object)} and {@link #gp_context_error(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void gp_context_error(Gphoto2Library.GPContext context, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_error(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:516</i>
	 */
	void gp_context_error(Gphoto2Library.GPContext context, String format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_status(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:518</i><br>
	 * @deprecated use the safer methods {@link #gp_context_status(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, java.lang.String, java.lang.Object)} and {@link #gp_context_status(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void gp_context_status(Gphoto2Library.GPContext context, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_status(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:518</i>
	 */
	void gp_context_status(Gphoto2Library.GPContext context, String format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_message(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:520</i><br>
	 * @deprecated use the safer methods {@link #gp_context_message(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, java.lang.String, java.lang.Object)} and {@link #gp_context_message(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void gp_context_message(Gphoto2Library.GPContext context, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_message(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:520</i>
	 */
	void gp_context_message(Gphoto2Library.GPContext context, String format, Object... varargs);
	/**
	 * Original signature : <code>GPContextFeedback gp_context_question(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:522</i><br>
	 * @deprecated use the safer methods {@link #gp_context_question(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, java.lang.String, java.lang.Object)} and {@link #gp_context_question(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int gp_context_question(Gphoto2Library.GPContext context, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>GPContextFeedback gp_context_question(GPContext*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:522</i>
	 */
	int gp_context_question(Gphoto2Library.GPContext context, String format, Object... varargs);
	/**
	 * Original signature : <code>GPContextFeedback gp_context_cancel(GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:524</i>
	 */
	int gp_context_cancel(Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_context_progress_start(GPContext*, float, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:526</i><br>
	 * @deprecated use the safer methods {@link #gp_context_progress_start(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, float, java.lang.String, java.lang.Object)} and {@link #gp_context_progress_start(com.angryelectron.libgphoto2.Gphoto2Library.GPContext, float, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int gp_context_progress_start(Gphoto2Library.GPContext context, float target, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>int gp_context_progress_start(GPContext*, float, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:526</i>
	 */
	int gp_context_progress_start(Gphoto2Library.GPContext context, float target, String format, Object... varargs);
	/**
	 * Original signature : <code>void gp_context_progress_update(GPContext*, unsigned int, float)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:528</i>
	 */
	void gp_context_progress_update(Gphoto2Library.GPContext context, int id, float current);
	/**
	 * Original signature : <code>void gp_context_progress_stop(GPContext*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-context.h:530</i>
	 */
	void gp_context_progress_stop(Gphoto2Library.GPContext context, int id);
	/**
	 * Original signature : <code>int gp_list_new(CameraList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:566</i><br>
	 * @deprecated use the safer method {@link #gp_list_new(com.angryelectron.libgphoto2.Gphoto2Library.CameraList[])} instead
	 */
	@Deprecated 
	int gp_list_new(PointerByReference list);
	/**
	 * Original signature : <code>int gp_list_new(CameraList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:566</i>
	 */
	int gp_list_new(Gphoto2Library.CameraList list[]);
	/**
	 * Original signature : <code>int gp_list_ref(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:568</i>
	 */
	int gp_list_ref(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_unref(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:570</i>
	 */
	int gp_list_unref(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_free(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:572</i>
	 */
	int gp_list_free(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_count(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:574</i>
	 */
	int gp_list_count(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_append(CameraList*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:576</i><br>
	 * @deprecated use the safer methods {@link #gp_list_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, java.lang.String, java.lang.String)} and {@link #gp_list_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_list_append(Gphoto2Library.CameraList list, Pointer name, Pointer value);
	/**
	 * Original signature : <code>int gp_list_append(CameraList*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:576</i>
	 */
	int gp_list_append(Gphoto2Library.CameraList list, String name, String value);
	/**
	 * Original signature : <code>int gp_list_reset(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:578</i>
	 */
	int gp_list_reset(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_sort(CameraList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:580</i>
	 */
	int gp_list_sort(Gphoto2Library.CameraList list);
	/**
	 * Original signature : <code>int gp_list_find_by_name(CameraList*, int*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:582</i><br>
	 * @deprecated use the safer methods {@link #gp_list_find_by_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, java.nio.IntBuffer, java.lang.String)} and {@link #gp_list_find_by_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_list_find_by_name(Gphoto2Library.CameraList list, IntByReference index, Pointer name);
	/**
	 * Original signature : <code>int gp_list_find_by_name(CameraList*, int*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:582</i>
	 */
	int gp_list_find_by_name(Gphoto2Library.CameraList list, IntBuffer index, String name);
	/**
	 * Original signature : <code>int gp_list_get_name(CameraList*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:584</i><br>
	 * @deprecated use the safer methods {@link #gp_list_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, java.lang.String[])} and {@link #gp_list_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_list_get_name(Gphoto2Library.CameraList list, int index, PointerByReference name);
	/**
	 * Original signature : <code>int gp_list_get_name(CameraList*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:584</i>
	 */
	int gp_list_get_name(Gphoto2Library.CameraList list, int index, String name[]);
	/**
	 * Original signature : <code>int gp_list_get_value(CameraList*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:586</i><br>
	 * @deprecated use the safer methods {@link #gp_list_get_value(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, java.lang.String[])} and {@link #gp_list_get_value(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_list_get_value(Gphoto2Library.CameraList list, int index, PointerByReference value);
	/**
	 * Original signature : <code>int gp_list_get_value(CameraList*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:586</i>
	 */
	int gp_list_get_value(Gphoto2Library.CameraList list, int index, String value[]);
	/**
	 * Original signature : <code>int gp_list_set_name(CameraList*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:588</i><br>
	 * @deprecated use the safer methods {@link #gp_list_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, java.lang.String)} and {@link #gp_list_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_list_set_name(Gphoto2Library.CameraList list, int index, Pointer name);
	/**
	 * Original signature : <code>int gp_list_set_name(CameraList*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:588</i>
	 */
	int gp_list_set_name(Gphoto2Library.CameraList list, int index, String name);
	/**
	 * Original signature : <code>int gp_list_set_value(CameraList*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:590</i><br>
	 * @deprecated use the safer methods {@link #gp_list_set_value(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, java.lang.String)} and {@link #gp_list_set_value(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_list_set_value(Gphoto2Library.CameraList list, int index, Pointer value);
	/**
	 * Original signature : <code>int gp_list_set_value(CameraList*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:590</i>
	 */
	int gp_list_set_value(Gphoto2Library.CameraList list, int index, String value);
	/**
	 * Original signature : <code>int gp_list_populate(CameraList*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:592</i><br>
	 * @deprecated use the safer methods {@link #gp_list_populate(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, java.lang.String, int)} and {@link #gp_list_populate(com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int gp_list_populate(Gphoto2Library.CameraList list, Pointer format, int count);
	/**
	 * Original signature : <code>int gp_list_populate(CameraList*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-list.h:592</i>
	 */
	int gp_list_populate(Gphoto2Library.CameraList list, String format, int count);
	/**
	 * Original signature : <code>int gp_abilities_list_new(CameraAbilitiesList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:682</i><br>
	 * @deprecated use the safer method {@link #gp_abilities_list_new(com.angryelectron.libgphoto2.Gphoto2Library.CameraAbilitiesList[])} instead
	 */
	@Deprecated 
	int gp_abilities_list_new(PointerByReference list);
	/**
	 * Original signature : <code>int gp_abilities_list_new(CameraAbilitiesList**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:682</i>
	 */
	int gp_abilities_list_new(Gphoto2Library.CameraAbilitiesList list[]);
	/**
	 * Original signature : <code>int gp_abilities_list_free(CameraAbilitiesList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:684</i>
	 */
	int gp_abilities_list_free(Gphoto2Library.CameraAbilitiesList list);
	/**
	 * Original signature : <code>int gp_abilities_list_load(CameraAbilitiesList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:686</i>
	 */
	int gp_abilities_list_load(Gphoto2Library.CameraAbilitiesList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_abilities_list_reset(CameraAbilitiesList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:688</i>
	 */
	int gp_abilities_list_reset(Gphoto2Library.CameraAbilitiesList list);
	/**
	 * Original signature : <code>int gp_abilities_list_detect(CameraAbilitiesList*, GPPortInfoList*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:690</i>
	 */
	int gp_abilities_list_detect(Gphoto2Library.CameraAbilitiesList list, Gphoto2Library.GPPortInfoList info_list, Gphoto2Library.CameraList l, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_abilities_list_append(CameraAbilitiesList*, CameraAbilities)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:692</i>
	 */
	int gp_abilities_list_append(Gphoto2Library.CameraAbilitiesList list, CameraAbilities.ByValue abilities);
	/**
	 * Original signature : <code>int gp_abilities_list_count(CameraAbilitiesList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:694</i>
	 */
	int gp_abilities_list_count(Gphoto2Library.CameraAbilitiesList list);
	/**
	 * Original signature : <code>int gp_abilities_list_lookup_model(CameraAbilitiesList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:696</i><br>
	 * @deprecated use the safer methods {@link #gp_abilities_list_lookup_model(com.angryelectron.libgphoto2.Gphoto2Library.CameraAbilitiesList, java.lang.String)} and {@link #gp_abilities_list_lookup_model(com.angryelectron.libgphoto2.Gphoto2Library.CameraAbilitiesList, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_abilities_list_lookup_model(Gphoto2Library.CameraAbilitiesList list, Pointer model);
	/**
	 * Original signature : <code>int gp_abilities_list_lookup_model(CameraAbilitiesList*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:696</i>
	 */
	int gp_abilities_list_lookup_model(Gphoto2Library.CameraAbilitiesList list, String model);
	/**
	 * Original signature : <code>int gp_abilities_list_get_abilities(CameraAbilitiesList*, int, CameraAbilities*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:698</i>
	 */
	int gp_abilities_list_get_abilities(Gphoto2Library.CameraAbilitiesList list, int index, CameraAbilities abilities);
	/**
	 * Original signature : <code>char* gp_message_codeset(const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:700</i><br>
	 * @deprecated use the safer methods {@link #gp_message_codeset(java.lang.String)} and {@link #gp_message_codeset(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String gp_message_codeset(Pointer charPtr1);
	/**
	 * Original signature : <code>char* gp_message_codeset(const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-abilities-list.h:700</i>
	 */
	String gp_message_codeset(String charPtr1);
	/**
	 * Original signature : <code>int gp_widget_new(CameraWidgetType, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:746</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_new(int, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} and {@link #gp_widget_new(int, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_new(int type, Pointer label, PointerByReference widget);
	/**
	 * Original signature : <code>int gp_widget_new(CameraWidgetType, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:746</i>
	 */
	int gp_widget_new(int type, String label, Gphoto2Library.CameraWidget widget[]);
	/**
	 * Original signature : <code>int gp_widget_new(CameraWidgetType, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:746</i>
	 */
	int gp_widget_new(int type, Pointer label, Gphoto2Library.CameraWidget widget[]);
	/**
	 * Original signature : <code>int gp_widget_free(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:748</i>
	 */
	int gp_widget_free(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_ref(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:750</i>
	 */
	int gp_widget_ref(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_unref(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:752</i>
	 */
	int gp_widget_unref(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_append(CameraWidget*, CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:754</i>
	 */
	int gp_widget_append(Gphoto2Library.CameraWidget widget, Gphoto2Library.CameraWidget child);
	/**
	 * Original signature : <code>int gp_widget_prepend(CameraWidget*, CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:756</i>
	 */
	int gp_widget_prepend(Gphoto2Library.CameraWidget widget, Gphoto2Library.CameraWidget child);
	/**
	 * Original signature : <code>int gp_widget_count_children(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:758</i>
	 */
	int gp_widget_count_children(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_get_child(CameraWidget*, int, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:760</i><br>
	 * @deprecated use the safer method {@link #gp_widget_get_child(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_child(Gphoto2Library.CameraWidget widget, int child_number, PointerByReference child);
	/**
	 * Original signature : <code>int gp_widget_get_child(CameraWidget*, int, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:760</i>
	 */
	int gp_widget_get_child(Gphoto2Library.CameraWidget widget, int child_number, Gphoto2Library.CameraWidget child[]);
	/**
	 * Retrieve Widgets<br>
	 * Original signature : <code>int gp_widget_get_child_by_label(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:765</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_child_by_label(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} and {@link #gp_widget_get_child_by_label(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_child_by_label(Gphoto2Library.CameraWidget widget, Pointer label, PointerByReference child);
	/**
	 * Retrieve Widgets<br>
	 * Original signature : <code>int gp_widget_get_child_by_label(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:765</i>
	 */
	int gp_widget_get_child_by_label(Gphoto2Library.CameraWidget widget, String label, Gphoto2Library.CameraWidget child[]);
	/**
	 * Retrieve Widgets<br>
	 * Original signature : <code>int gp_widget_get_child_by_label(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:765</i>
	 */
	int gp_widget_get_child_by_label(Gphoto2Library.CameraWidget widget, Pointer label, Gphoto2Library.CameraWidget child[]);
	/**
	 * Original signature : <code>int gp_widget_get_child_by_id(CameraWidget*, int, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:767</i><br>
	 * @deprecated use the safer method {@link #gp_widget_get_child_by_id(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_child_by_id(Gphoto2Library.CameraWidget widget, int id, PointerByReference child);
	/**
	 * Original signature : <code>int gp_widget_get_child_by_id(CameraWidget*, int, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:767</i>
	 */
	int gp_widget_get_child_by_id(Gphoto2Library.CameraWidget widget, int id, Gphoto2Library.CameraWidget child[]);
	/**
	 * Original signature : <code>int gp_widget_get_child_by_name(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:769</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_child_by_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} and {@link #gp_widget_get_child_by_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_child_by_name(Gphoto2Library.CameraWidget widget, Pointer name, PointerByReference child);
	/**
	 * Original signature : <code>int gp_widget_get_child_by_name(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:769</i>
	 */
	int gp_widget_get_child_by_name(Gphoto2Library.CameraWidget widget, String name, Gphoto2Library.CameraWidget child[]);
	/**
	 * Original signature : <code>int gp_widget_get_child_by_name(CameraWidget*, const char*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:769</i>
	 */
	int gp_widget_get_child_by_name(Gphoto2Library.CameraWidget widget, Pointer name, Gphoto2Library.CameraWidget child[]);
	/**
	 * Original signature : <code>int gp_widget_get_root(CameraWidget*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:771</i><br>
	 * @deprecated use the safer method {@link #gp_widget_get_root(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_root(Gphoto2Library.CameraWidget widget, PointerByReference root);
	/**
	 * Original signature : <code>int gp_widget_get_root(CameraWidget*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:771</i>
	 */
	int gp_widget_get_root(Gphoto2Library.CameraWidget widget, Gphoto2Library.CameraWidget root[]);
	/**
	 * Original signature : <code>int gp_widget_get_parent(CameraWidget*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:773</i><br>
	 * @deprecated use the safer method {@link #gp_widget_get_parent(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[])} instead
	 */
	@Deprecated 
	int gp_widget_get_parent(Gphoto2Library.CameraWidget widget, PointerByReference parent);
	/**
	 * Original signature : <code>int gp_widget_get_parent(CameraWidget*, CameraWidget**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:773</i>
	 */
	int gp_widget_get_parent(Gphoto2Library.CameraWidget widget, Gphoto2Library.CameraWidget parent[]);
	/**
	 * Original signature : <code>int gp_widget_set_value(CameraWidget*, const void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:775</i>
	 */
	int gp_widget_set_value(Gphoto2Library.CameraWidget widget, Pointer value);
	/**
	 * Original signature : <code>int gp_widget_get_value(CameraWidget*, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:777</i>
	 */
        /* modified by Andrew */
	int gp_widget_get_value(Gphoto2Library.CameraWidget widget, Pointer value);
	/**
	 * Original signature : <code>int gp_widget_set_name(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:779</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String)} and {@link #gp_widget_set_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_widget_set_name(Gphoto2Library.CameraWidget widget, Pointer name);
	/**
	 * Original signature : <code>int gp_widget_set_name(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:779</i>
	 */
	int gp_widget_set_name(Gphoto2Library.CameraWidget widget, String name);
	/**
	 * Original signature : <code>int gp_widget_get_name(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:781</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String[])} and {@link #gp_widget_get_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_name(Gphoto2Library.CameraWidget widget, PointerByReference name);
	/**
	 * Original signature : <code>int gp_widget_get_name(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:781</i>
	 */
	int gp_widget_get_name(Gphoto2Library.CameraWidget widget, String name[]);
	/**
	 * Original signature : <code>int gp_widget_set_info(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:783</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_set_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String)} and {@link #gp_widget_set_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_widget_set_info(Gphoto2Library.CameraWidget widget, Pointer info);
	/**
	 * Original signature : <code>int gp_widget_set_info(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:783</i>
	 */
	int gp_widget_set_info(Gphoto2Library.CameraWidget widget, String info);
	/**
	 * Original signature : <code>int gp_widget_get_info(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:785</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String[])} and {@link #gp_widget_get_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_info(Gphoto2Library.CameraWidget widget, PointerByReference info);
	/**
	 * Original signature : <code>int gp_widget_get_info(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:785</i>
	 */
	int gp_widget_get_info(Gphoto2Library.CameraWidget widget, String info[]);
	/**
	 * Original signature : <code>int gp_widget_get_id(CameraWidget*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:787</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_id(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.nio.IntBuffer)} and {@link #gp_widget_get_id(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_id(Gphoto2Library.CameraWidget widget, IntByReference id);
	/**
	 * Original signature : <code>int gp_widget_get_id(CameraWidget*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:787</i>
	 */
	int gp_widget_get_id(Gphoto2Library.CameraWidget widget, IntBuffer id);
	/**
	 * Original signature : <code>int gp_widget_get_type(CameraWidget*, CameraWidgetType*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:789</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.nio.IntBuffer)} and {@link #gp_widget_get_type(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_type(Gphoto2Library.CameraWidget widget, IntByReference type);
	/**
	 * Original signature : <code>int gp_widget_get_type(CameraWidget*, CameraWidgetType*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:789</i>
	 */
	int gp_widget_get_type(Gphoto2Library.CameraWidget widget, IntBuffer type);
	/**
	 * Original signature : <code>int gp_widget_get_label(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:791</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_label(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String[])} and {@link #gp_widget_get_label(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_label(Gphoto2Library.CameraWidget widget, PointerByReference label);
	/**
	 * Original signature : <code>int gp_widget_get_label(CameraWidget*, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:791</i>
	 */
	int gp_widget_get_label(Gphoto2Library.CameraWidget widget, String label[]);
	/**
	 * Original signature : <code>int gp_widget_set_range(CameraWidget*, float, float, float)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:793</i>
	 */
	int gp_widget_set_range(Gphoto2Library.CameraWidget range, float low, float high, float increment);
	/**
	 * Original signature : <code>int gp_widget_get_range(CameraWidget*, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:795</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_range(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #gp_widget_get_range(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_range(Gphoto2Library.CameraWidget range, FloatByReference min, FloatByReference max, FloatByReference increment);
	/**
	 * Original signature : <code>int gp_widget_get_range(CameraWidget*, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:795</i>
	 */
	int gp_widget_get_range(Gphoto2Library.CameraWidget range, FloatBuffer min, FloatBuffer max, FloatBuffer increment);
	/**
	 * Original signature : <code>int gp_widget_add_choice(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:797</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_add_choice(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.lang.String)} and {@link #gp_widget_add_choice(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_widget_add_choice(Gphoto2Library.CameraWidget widget, Pointer choice);
	/**
	 * Original signature : <code>int gp_widget_add_choice(CameraWidget*, const char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:797</i>
	 */
	int gp_widget_add_choice(Gphoto2Library.CameraWidget widget, String choice);
	/**
	 * Original signature : <code>int gp_widget_count_choices(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:799</i>
	 */
	int gp_widget_count_choices(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_get_choice(CameraWidget*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:801</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_choice(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, int, java.lang.String[])} and {@link #gp_widget_get_choice(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_choice(Gphoto2Library.CameraWidget widget, int choice_number, PointerByReference choice);
	/**
	 * Original signature : <code>int gp_widget_get_choice(CameraWidget*, int, const char**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:801</i>
	 */
	int gp_widget_get_choice(Gphoto2Library.CameraWidget widget, int choice_number, String choice[]);
	/**
	 * Original signature : <code>int gp_widget_changed(CameraWidget*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:803</i>
	 */
	int gp_widget_changed(Gphoto2Library.CameraWidget widget);
	/**
	 * Original signature : <code>int gp_widget_set_changed(CameraWidget*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:805</i>
	 */
	int gp_widget_set_changed(Gphoto2Library.CameraWidget widget, int changed);
	/**
	 * Original signature : <code>int gp_widget_set_readonly(CameraWidget*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:807</i>
	 */
	int gp_widget_set_readonly(Gphoto2Library.CameraWidget widget, int readonly);
	/**
	 * Original signature : <code>int gp_widget_get_readonly(CameraWidget*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:809</i><br>
	 * @deprecated use the safer methods {@link #gp_widget_get_readonly(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, java.nio.IntBuffer)} and {@link #gp_widget_get_readonly(com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gp_widget_get_readonly(Gphoto2Library.CameraWidget widget, IntByReference readonly);
	/**
	 * Original signature : <code>int gp_widget_get_readonly(CameraWidget*, int*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-widget.h:809</i>
	 */
	int gp_widget_get_readonly(Gphoto2Library.CameraWidget widget, IntBuffer readonly);
	/**
	 * Original signature : <code>int gp_filesystem_new(CameraFilesystem**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:983</i><br>
	 * @deprecated use the safer method {@link #gp_filesystem_new(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem[])} instead
	 */
	@Deprecated 
	int gp_filesystem_new(PointerByReference fs);
	/**
	 * Original signature : <code>int gp_filesystem_new(CameraFilesystem**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:983</i>
	 */
	int gp_filesystem_new(Gphoto2Library.CameraFilesystem fs[]);
	/**
	 * Original signature : <code>int gp_filesystem_free(CameraFilesystem*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:985</i>
	 */
	int gp_filesystem_free(Gphoto2Library.CameraFilesystem fs);
	/**
	 * Manual editing<br>
	 * Original signature : <code>int gp_filesystem_append(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:990</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_append(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_append(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, Gphoto2Library.GPContext context);
	/**
	 * Manual editing<br>
	 * Original signature : <code>int gp_filesystem_append(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:990</i>
	 */
	int gp_filesystem_append(Gphoto2Library.CameraFilesystem fs, String folder, String filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_info_noop(CameraFilesystem*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:992</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_set_info_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_set_info_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_set_info_noop(Gphoto2Library.CameraFilesystem fs, Pointer folder, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_info_noop(CameraFilesystem*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:992</i>
	 */
	int gp_filesystem_set_info_noop(Gphoto2Library.CameraFilesystem fs, String folder, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_file_noop(CameraFilesystem*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:994</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_set_file_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_set_file_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_set_file_noop(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_file_noop(CameraFilesystem*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:994</i>
	 */
	int gp_filesystem_set_file_noop(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_file_noop(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:996</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_delete_file_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_delete_file_noop(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_delete_file_noop(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_file_noop(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:996</i>
	 */
	int gp_filesystem_delete_file_noop(Gphoto2Library.CameraFilesystem fs, String folder, String filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_reset(CameraFilesystem*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:998</i>
	 */
	int gp_filesystem_reset(Gphoto2Library.CameraFilesystem fs);
	/**
	 * Information retrieval<br>
	 * Original signature : <code>int gp_filesystem_count(CameraFilesystem*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1003</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_count(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_count(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_count(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.GPContext context);
	/**
	 * Information retrieval<br>
	 * Original signature : <code>int gp_filesystem_count(CameraFilesystem*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1003</i>
	 */
	int gp_filesystem_count(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_name(CameraFilesystem*, const char*, int, const char**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1005</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, int, java.lang.String[], com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_name(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_name(Gphoto2Library.CameraFilesystem fs, Pointer folder, int filenumber, PointerByReference filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_name(CameraFilesystem*, const char*, int, const char**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1005</i>
	 */
	int gp_filesystem_name(Gphoto2Library.CameraFilesystem fs, String folder, int filenumber, String filename[], Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_get_folder(CameraFilesystem*, const char*, char**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1007</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_get_folder(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.sun.jna.ptr.PointerByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_get_folder(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_get_folder(Gphoto2Library.CameraFilesystem fs, Pointer filename, PointerByReference folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_get_folder(CameraFilesystem*, const char*, char**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1007</i>
	 */
	int gp_filesystem_get_folder(Gphoto2Library.CameraFilesystem fs, String filename, PointerByReference folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_number(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1009</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_number(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_number(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_number(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_number(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1009</i>
	 */
	int gp_filesystem_number(Gphoto2Library.CameraFilesystem fs, String folder, String filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_list_funcs(CameraFilesystem*, CameraFilesystemListFunc, CameraFilesystemListFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1013</i>
	 */
	int gp_filesystem_set_list_funcs(Gphoto2Library.CameraFilesystem fs, Gphoto2Library.CameraFilesystemListFunc file_list_func, Gphoto2Library.CameraFilesystemListFunc folder_list_func, Pointer data);
	/**
	 * Original signature : <code>int gp_filesystem_list_files(CameraFilesystem*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1015</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_list_files(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_list_files(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_list_files(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_list_files(CameraFilesystem*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1015</i>
	 */
	int gp_filesystem_list_files(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_list_folders(CameraFilesystem*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1017</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_list_folders(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_list_folders(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_list_folders(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_list_folders(CameraFilesystem*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1017</i>
	 */
	int gp_filesystem_list_folders(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_info_funcs(CameraFilesystem*, CameraFilesystemGetInfoFunc, CameraFilesystemSetInfoFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1022</i>
	 */
	int gp_filesystem_set_info_funcs(Gphoto2Library.CameraFilesystem fs, Gphoto2Library.CameraFilesystemGetInfoFunc get_info_func, Gphoto2Library.CameraFilesystemSetInfoFunc set_info_func, Pointer data);
	/**
	 * Original signature : <code>int gp_filesystem_get_info(CameraFilesystem*, const char*, const char*, CameraFileInfo*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1024</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_get_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.CameraFileInfo, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_get_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.CameraFileInfo, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_get_info(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, CameraFileInfo info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_get_info(CameraFilesystem*, const char*, const char*, CameraFileInfo*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1024</i>
	 */
	int gp_filesystem_get_info(Gphoto2Library.CameraFilesystem fs, String folder, String filename, CameraFileInfo info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_info(CameraFilesystem*, const char*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1026</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_set_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_set_info(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_set_info(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_info(CameraFilesystem*, const char*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1026</i>
	 */
	int gp_filesystem_set_info(Gphoto2Library.CameraFilesystem fs, String folder, String filename, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_file_funcs(CameraFilesystem*, CameraFilesystemGetFileFunc, CameraFilesystemDeleteFileFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1031</i>
	 */
	int gp_filesystem_set_file_funcs(Gphoto2Library.CameraFilesystem fs, Gphoto2Library.CameraFilesystemGetFileFunc get_file_func, Gphoto2Library.CameraFilesystemDeleteFileFunc del_file_func, Pointer data);
	/**
	 * Original signature : <code>int gp_filesystem_get_file(CameraFilesystem*, const char*, const char*, CameraFileType, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1033</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_get_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_get_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_get_file(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, int type, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_get_file(CameraFilesystem*, const char*, const char*, CameraFileType, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1033</i>
	 */
	int gp_filesystem_get_file(Gphoto2Library.CameraFilesystem fs, String folder, String filename, int type, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_file(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1035</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_delete_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_delete_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_delete_file(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_file(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1035</i>
	 */
	int gp_filesystem_delete_file(Gphoto2Library.CameraFilesystem fs, String folder, String filename, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_folder_funcs(CameraFilesystem*, CameraFilesystemPutFileFunc, CameraFilesystemDeleteAllFunc, CameraFilesystemDirFunc, CameraFilesystemDirFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1041</i>
	 */
	int gp_filesystem_set_folder_funcs(Gphoto2Library.CameraFilesystem fs, Gphoto2Library.CameraFilesystemPutFileFunc put_file_func, Gphoto2Library.CameraFilesystemDeleteAllFunc delete_all_func, Gphoto2Library.CameraFilesystemDirFunc make_dir_func, Gphoto2Library.CameraFilesystemDirFunc remove_dir_func, Pointer data);
	/**
	 * Original signature : <code>int gp_filesystem_get_storageinfo(CameraFilesystem*, CameraStorageInformation**, int*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1044</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_get_storageinfo(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_get_storageinfo(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_get_storageinfo(Gphoto2Library.CameraFilesystem fs, PointerByReference CameraStorageInformationPtrPtr1, IntByReference nrofstorageinformations, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_get_storageinfo(CameraFilesystem*, CameraStorageInformation**, int*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1044</i>
	 */
	int gp_filesystem_get_storageinfo(Gphoto2Library.CameraFilesystem fs, PointerByReference CameraStorageInformationPtrPtr1, IntBuffer nrofstorageinformations, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_set_funcs(CameraFilesystem*, CameraFilesystemFuncs*, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1062</i>
	 */
	int gp_filesystem_set_funcs(Gphoto2Library.CameraFilesystem fs, CameraFilesystemFuncs funcs, Pointer data);
	/**
	 * Original signature : <code>int gp_filesystem_put_file(CameraFilesystem*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1064</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_put_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_put_file(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_put_file(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_put_file(CameraFilesystem*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1064</i>
	 */
	int gp_filesystem_put_file(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_all(CameraFilesystem*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1066</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_delete_all(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_delete_all(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_delete_all(Gphoto2Library.CameraFilesystem fs, Pointer folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_delete_all(CameraFilesystem*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1066</i>
	 */
	int gp_filesystem_delete_all(Gphoto2Library.CameraFilesystem fs, String folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_make_dir(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1068</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_make_dir(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_make_dir(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_make_dir(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_make_dir(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1068</i>
	 */
	int gp_filesystem_make_dir(Gphoto2Library.CameraFilesystem fs, String folder, String name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_remove_dir(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1070</i><br>
	 * @deprecated use the safer methods {@link #gp_filesystem_remove_dir(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_filesystem_remove_dir(com.angryelectron.libgphoto2.Gphoto2Library.CameraFilesystem, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_filesystem_remove_dir(Gphoto2Library.CameraFilesystem fs, Pointer folder, Pointer name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_filesystem_remove_dir(CameraFilesystem*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1070</i>
	 */
	int gp_filesystem_remove_dir(Gphoto2Library.CameraFilesystem fs, String folder, String name, Gphoto2Library.GPContext context);
	/**
	 * For debugging<br>
	 * Original signature : <code>int gp_filesystem_dump(CameraFilesystem*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-filesys.h:1075</i>
	 */
	int gp_filesystem_dump(Gphoto2Library.CameraFilesystem fs);
	/**
	 * Original signature : <code>char* gp_result_as_string(int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-result.h:1079</i>
	 */
	String gp_result_as_string(int result);
	/**
	 * Create a new camera device.<br>
	 * Original signature : <code>int gp_camera_new(Camera**)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1240</i>
	 */
	int gp_camera_new(PointerByReference camera);
	/**
	 * \name Preparing initialization <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_set_abilities(Camera*, CameraAbilities)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1246</i>
	 */
	int gp_camera_set_abilities(Camera camera, CameraAbilities.ByValue abilities);
	/**
	 * Original signature : <code>int gp_camera_get_abilities(Camera*, CameraAbilities*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1248</i>
	 */
	int gp_camera_get_abilities(Camera camera, CameraAbilities abilities);
	/**
	 * Original signature : <code>int gp_camera_set_port_info(Camera*, GPPortInfo)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1250</i>
	 */
	int gp_camera_set_port_info(Camera camera, GPPortInfo.ByValue info);
	/**
	 * Original signature : <code>int gp_camera_get_port_info(Camera*, GPPortInfo*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1252</i>
	 */
	int gp_camera_get_port_info(Camera camera, GPPortInfo info);
	/**
	 * \name camera speed<br>
	 * * You normally don't use that. If you do, you prevent the camera driver<br>
	 * from selecting the optimal speed.<br>
	 * * @{<br>
	 * Original signature : <code>int gp_camera_set_port_speed(Camera*, int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1260</i>
	 */
	int gp_camera_set_port_speed(Camera camera, int speed);
	/**
	 * Original signature : <code>int gp_camera_get_port_speed(Camera*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1262</i>
	 */
	int gp_camera_get_port_speed(Camera camera);
	/**
	 * \name Initialization <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_init(Camera*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1268</i>
	 */
	int gp_camera_init(Camera camera, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_exit(Camera*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1270</i>
	 */
	int gp_camera_exit(Camera camera, Gphoto2Library.GPContext context);
	/**
	 * \name Operations on cameras <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_ref(Camera*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1276</i>
	 */
	int gp_camera_ref(Camera camera);
	/**
	 * Original signature : <code>int gp_camera_unref(Camera*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1278</i>
	 */
	int gp_camera_unref(Camera camera);
	/**
	 * Original signature : <code>int gp_camera_free(Camera*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1280</i>
	 */
	int gp_camera_free(Camera camera);
	/**
	 * Original signature : <code>int gp_camera_get_config(Camera*, CameraWidget**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1282</i><br>
	 * @deprecated use the safer method {@link #gp_camera_get_config(com.angryelectron.libgphoto2.Camera, com.angryelectron.libgphoto2.Gphoto2Library.CameraWidget[], com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_get_config(Camera camera, PointerByReference window, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_config(Camera*, CameraWidget**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1282</i>
	 */
	int gp_camera_get_config(Camera camera, Gphoto2Library.CameraWidget window[], Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_set_config(Camera*, CameraWidget*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1284</i>
	 */
	int gp_camera_set_config(Camera camera, Gphoto2Library.CameraWidget window, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_summary(Camera*, CameraText*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1286</i>
	 */
	int gp_camera_get_summary(Camera camera, CameraText summary, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_manual(Camera*, CameraText*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1288</i>
	 */
	int gp_camera_get_manual(Camera camera, CameraText manual, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_about(Camera*, CameraText*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1290</i>
	 */
	int gp_camera_get_about(Camera camera, CameraText about, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_capture(Camera*, CameraCaptureType, CameraFilePath*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1292</i>
	 */
	int gp_camera_capture(Camera camera, int type, CameraFilePath path, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_capture_preview(Camera*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1294</i>
	 */
	int gp_camera_capture_preview(Camera camera, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_wait_for_event(Camera*, int, CameraEventType*, void**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1296</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_wait_for_event(com.angryelectron.libgphoto2.Camera, int, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_wait_for_event(com.angryelectron.libgphoto2.Camera, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_wait_for_event(Camera camera, int timeout, IntByReference eventtype, PointerByReference eventdata, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_wait_for_event(Camera*, int, CameraEventType*, void**, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1296</i>
	 */
	int gp_camera_wait_for_event(Camera camera, int timeout, IntBuffer eventtype, PointerByReference eventdata, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_storageinfo(Camera*, CameraStorageInformation**, int*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1298</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_get_storageinfo(com.angryelectron.libgphoto2.Camera, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_get_storageinfo(com.angryelectron.libgphoto2.Camera, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_get_storageinfo(Camera camera, PointerByReference CameraStorageInformationPtrPtr1, IntByReference intPtr1, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_get_storageinfo(Camera*, CameraStorageInformation**, int*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1298</i>
	 */
	int gp_camera_get_storageinfo(Camera camera, PointerByReference CameraStorageInformationPtrPtr1, IntBuffer intPtr1, Gphoto2Library.GPContext context);
	/**
	 * \name Operations on folders <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_folder_list_files(Camera*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1304</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_list_files(com.angryelectron.libgphoto2.Camera, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_list_files(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_list_files(Camera camera, Pointer folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * \name Operations on folders <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_folder_list_files(Camera*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1304</i>
	 */
	int gp_camera_folder_list_files(Camera camera, String folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_list_folders(Camera*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1306</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_list_folders(com.angryelectron.libgphoto2.Camera, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_list_folders(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraList, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_list_folders(Camera camera, Pointer folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_list_folders(Camera*, const char*, CameraList*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1306</i>
	 */
	int gp_camera_folder_list_folders(Camera camera, String folder, Gphoto2Library.CameraList list, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_delete_all(Camera*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1308</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_delete_all(com.angryelectron.libgphoto2.Camera, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_delete_all(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_delete_all(Camera camera, Pointer folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_delete_all(Camera*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1308</i>
	 */
	int gp_camera_folder_delete_all(Camera camera, String folder, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_put_file(Camera*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1310</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_put_file(com.angryelectron.libgphoto2.Camera, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_put_file(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_put_file(Camera camera, Pointer folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_put_file(Camera*, const char*, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1310</i>
	 */
	int gp_camera_folder_put_file(Camera camera, String folder, Gphoto2Library.CameraFile file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_make_dir(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1312</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_make_dir(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_make_dir(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_make_dir(Camera camera, Pointer folder, Pointer name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_make_dir(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1312</i>
	 */
	int gp_camera_folder_make_dir(Camera camera, String folder, String name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_remove_dir(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1314</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_folder_remove_dir(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_folder_remove_dir(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_folder_remove_dir(Camera camera, Pointer folder, Pointer name, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_folder_remove_dir(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1314</i>
	 */
	int gp_camera_folder_remove_dir(Camera camera, String folder, String name, Gphoto2Library.GPContext context);
	/**
	 * \name Operations on files <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_file_get_info(Camera*, const char*, const char*, CameraFileInfo*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1320</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_file_get_info(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.CameraFileInfo, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_file_get_info(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.CameraFileInfo, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_file_get_info(Camera camera, Pointer folder, Pointer file, CameraFileInfo info, Gphoto2Library.GPContext context);
	/**
	 * \name Operations on files <br>
	 * @{<br>
	 * Original signature : <code>int gp_camera_file_get_info(Camera*, const char*, const char*, CameraFileInfo*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1320</i>
	 */
	int gp_camera_file_get_info(Camera camera, String folder, String file, CameraFileInfo info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_set_info(Camera*, const char*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1322</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_file_set_info(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_file_set_info(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.CameraFileInfo.ByValue, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_file_set_info(Camera camera, Pointer folder, Pointer file, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_set_info(Camera*, const char*, const char*, CameraFileInfo, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1322</i>
	 */
	int gp_camera_file_set_info(Camera camera, String folder, String file, CameraFileInfo.ByValue info, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_get(Camera*, const char*, const char*, CameraFileType, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1324</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_file_get(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_file_get(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.angryelectron.libgphoto2.Gphoto2Library.CameraFile, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_file_get(Camera camera, Pointer folder, Pointer file, int type, Gphoto2Library.CameraFile camera_file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_get(Camera*, const char*, const char*, CameraFileType, CameraFile*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1324</i>
	 */
	int gp_camera_file_get(Camera camera, String folder, String file, int type, Gphoto2Library.CameraFile camera_file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_delete(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1326</i><br>
	 * @deprecated use the safer methods {@link #gp_camera_file_delete(com.angryelectron.libgphoto2.Camera, java.lang.String, java.lang.String, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} and {@link #gp_camera_file_delete(com.angryelectron.libgphoto2.Camera, com.sun.jna.Pointer, com.sun.jna.Pointer, com.angryelectron.libgphoto2.Gphoto2Library.GPContext)} instead
	 */
	@Deprecated 
	int gp_camera_file_delete(Camera camera, Pointer folder, Pointer file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_camera_file_delete(Camera*, const char*, const char*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1326</i>
	 */
	int gp_camera_file_delete(Camera camera, String folder, String file, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>void gp_camera_set_timeout_funcs(Camera*, CameraTimeoutStartFunc, CameraTimeoutStopFunc, void*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1335</i>
	 */
	void gp_camera_set_timeout_funcs(Camera camera, Gphoto2Library.CameraTimeoutStartFunc start_func, Gphoto2Library.CameraTimeoutStopFunc stop_func, Pointer data);
	/**
	 * Original signature : <code>int gp_camera_start_timeout(Camera*, unsigned int, CameraTimeoutFunc)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1337</i>
	 */
	int gp_camera_start_timeout(Camera camera, int timeout, Gphoto2Library.CameraTimeoutFunc func);
	/**
	 * Original signature : <code>void gp_camera_stop_timeout(Camera*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-camera.h:1339</i>
	 */
	void gp_camera_stop_timeout(Camera camera, int id);
	/**
	 * If you want to write a camera library, you need to implement <br>
	 * the following three functions. Everything else should be declared<br>
	 * as static.<br>
	 * Original signature : <code>int camera_id(CameraText*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1373</i>
	 */
	int camera_id(CameraText id);
	/**
	 * Original signature : <code>int camera_abilities(CameraAbilitiesList*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1375</i>
	 */
	int camera_abilities(Gphoto2Library.CameraAbilitiesList list);
	/**
	 * Original signature : <code>int camera_init(Camera*, GPContext*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-library.h:1377</i>
	 */
	int camera_init(Camera camera, Gphoto2Library.GPContext context);
	/**
	 * Original signature : <code>int gp_setting_set(char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-setting.h:1381</i><br>
	 * @deprecated use the safer methods {@link #gp_setting_set(java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #gp_setting_set(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_setting_set(Pointer id, Pointer key, Pointer value);
	/**
	 * Original signature : <code>int gp_setting_set(char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-setting.h:1381</i>
	 */
	int gp_setting_set(ByteBuffer id, ByteBuffer key, ByteBuffer value);
	/**
	 * Original signature : <code>int gp_setting_get(char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-setting.h:1383</i><br>
	 * @deprecated use the safer methods {@link #gp_setting_get(java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #gp_setting_get(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int gp_setting_get(Pointer id, Pointer key, Pointer value);
	/**
	 * Original signature : <code>int gp_setting_get(char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/gphoto2/gphoto2-setting.h:1383</i>
	 */
	int gp_setting_get(ByteBuffer id, ByteBuffer key, ByteBuffer value);
	public static class GPPortPrivateLibrary extends PointerType {
		public GPPortPrivateLibrary(Pointer address) {
			super(address);
		}
		public GPPortPrivateLibrary() {
			super();
		}
	};
	public static class CameraWidget extends PointerType {
		public CameraWidget(Pointer address) {
			super(address);
		}
		public CameraWidget() {
			super();
		}
	};
	public static class GPPortPrivateCore extends PointerType {
		public GPPortPrivateCore(Pointer address) {
			super(address);
		}
		public GPPortPrivateCore() {
			super();
		}
	};
	public static class GPPortInfoList extends PointerType {
		public GPPortInfoList(Pointer address) {
			super(address);
		}
		public GPPortInfoList() {
			super();
		}
	};
	public static class CameraPrivateLibrary extends PointerType {
		public CameraPrivateLibrary(Pointer address) {
			super(address);
		}
		public CameraPrivateLibrary() {
			super();
		}
	};
	public static class CameraFilesystem extends PointerType {
		public CameraFilesystem(Pointer address) {
			super(address);
		}
		public CameraFilesystem() {
			super();
		}
	};
	public static class va_list extends PointerType {
		public va_list(Pointer address) {
			super(address);
		}
		public va_list() {
			super();
		}
	};
	public static class time_t extends PointerType {
		public time_t(Pointer address) {
			super(address);
		}
		public time_t() {
			super();
		}
	};
	public static class CameraAbilitiesList extends PointerType {
		public CameraAbilitiesList(Pointer address) {
			super(address);
		}
		public CameraAbilitiesList() {
			super();
		}
	};
	public static class CameraPrivateCore extends PointerType {
		public CameraPrivateCore(Pointer address) {
			super(address);
		}
		public CameraPrivateCore() {
			super();
		}
	};
	public static class CameraList extends PointerType {
		public CameraList(Pointer address) {
			super(address);
		}
		public CameraList() {
			super();
		}
	};
	public static class GPContext extends PointerType {
		public GPContext(Pointer address) {
			super(address);
		}
		public GPContext() {
			super();
		}
	};
	public static class CameraFile extends PointerType {
		public CameraFile(Pointer address) {
			super(address);
		}
		public CameraFile() {
			super();
		}
	};
}
